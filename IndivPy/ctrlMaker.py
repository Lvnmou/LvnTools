import maya.cmds as cmds
import Mod.uiStuff as uiStuff
import Mod.helpBox as helpBox


class CtrlMaker(object):
    def __init__(self, *args):
        self.uiStuffClass= uiStuff.UiStuff()
        self.helpBoxClass= helpBox.HelpBox()
        self.win()

    def win(self):
        try: 
            cmds.deleteUI("ctrlM") 
        except:
            pass    
        cmds.window("ctrlM", mb=1)              
        cmds.window("ctrlM", t="Ctrl Maker", s=1, e=1, wh=(360,665))
        cmds.menu(l="Help")
        cmds.menuItem(l="Help on CtrlMaker", c=lambda x: self.helps()) 
        cmds.menu(l="Reload")
        cmds.menuItem(l="Reload CtrlMaker", c=lambda x: self.reloadSub()) 
        self.uiStuffClass.sepBoxMain()
        column11= self.uiStuffClass.sepBoxSub("Create")
        form11= cmds.formLayout(nd=100, p=column11)
        self.cb111= cmds.checkBoxGrp(l="", l1="On Current View", cw=(1,0), v1=1)
        self.cb112= cmds.checkBoxGrp(l="", l1="On Grid", cw=(1,0))
        b111= cmds.button(l="Generate All Shape", w=100, c=lambda x: self.generateAllShape())
        cmds.formLayout(form11, e=1,
                                af=[(self.cb111, "top", 0),
                                    (self.cb112, "top", 20),
                                    (b111, "top", 46)],
                                ap=[(b111, "left", 0, 0),
                                    (b111, "right", 0, 100)])                  
        cmds.setFocus(cmds.text(l=""))
        self.uiStuffClass.multiSetParent(3)
        column12= self.uiStuffClass.sepBoxSub()
        form12= cmds.formLayout(nd=100, p=column12)             
        self.cb121= cmds.checkBoxGrp(l="", l1="Replace Existing Shape", cw=(1,0), v1=1)
        self.cb122= cmds.checkBoxGrp(l="", l1="Follow Existing Color", cw=(1,0), v1=1)
        self.cb123= cmds.checkBoxGrp(l="", l1="Distort Ratio Size", cw=(1,0), v1=1)
        self.cb124= cmds.checkBoxGrp(l="", l1="Resize (Overall scale)", cw=(1,0), v1=1)
        self.cb125= cmds.checkBoxGrp(l="", l1="Enlarge (For better selection)", cw=(1,0))
        self.cb126= cmds.checkBoxGrp(l="", l1="Estimate Shape's Center (Not pivot)", cw=(1,0), v1=1)
        self.cb127= cmds.checkBoxGrp(l="", l1="Inbetween Pivots (Not wrap around)", cw=(1,0), v1=1) 
        self.cb128= cmds.checkBoxGrp(l="", l1="Direction Point To Next", cw=(1,0), v1=1) 
        txt120= cmds.text(l="(Not For Inbetween)", fn="smallObliqueLabelFont", en=0, al="center")   
        txt121= cmds.text(l="(For Inbetween)", fn="smallObliqueLabelFont", en=0, al="center")
        txt122= cmds.text(l="(For Inbetween)", fn="smallObliqueLabelFont", en=0)            
        sep121= cmds.separator(st="in")
        self.cbTar= cmds.checkBoxGrp(l="", cw=(1,0), cc=lambda x: self.cbx01())        
        self.txtTar= cmds.textFieldButtonGrp(l="Targets : ", cw3=(50,50,50), adj=2, en=0, bl="   Grab   ", bc= lambda : self.grab())        
        sep122= cmds.separator(st="in")
        self.txt123= cmds.text(l="Select CTRL Then TARGETS", fn="smallObliqueLabelFont", en=0)
        b121= cmds.button(l="Create Ctrl", c=lambda x: self.createCtrl())   
        b122= cmds.button(l="Create Inbetween Ctrl", c=lambda x: self.CreateInbetweenCtrl(1)) 
        b123= cmds.button(l="Create Ctrl With Inbetween Shape", c=lambda x: self.CreateInbetweenCtrl(2))
        b124= cmds.button(l="Parent Ctrl Shape", c=lambda x: self.parentCtrlShape())
        b125= cmds.button(l="Parent Ctrl Shape (Inbetween) ", w=100, c=lambda x: self.CreateInbetweenCtrl(3))
        cmds.formLayout(form12, e=1,
                                af=[(self.cb121, "top", 0),
                                    (self.cb122, "top", 20),
                                    (self.cb123, "top", 40),
                                    (self.cb124, "top", 60),
                                    (self.cb125, "top", 80),
                                    (self.cb126, "top", 100),
                                    (self.cb127, "top", 120),
                                    (self.cb128, "top", 140),
                                    (txt120, "top", 105),
                                    (txt121, "top", 125),
                                    (txt122, "top", 145),
                                    (sep121, "top", 175),
                                    (self.cbTar, "top", 190),
                                    (self.txtTar, "top", 185),
                                    (sep122, "top", 215),
                                    (self.txt123, "top", 230),
                                    (b121, "top", 245),
                                    (b122, "top", 245),
                                    (b123, "top", 271),
                                    (b124, "top", 297),
                                    (b125, "top", 297)],
                                ap=[(txt120, "left", 210, 0),  
                                    (txt121, "left", 230, 0),  
                                    (txt122, "left", 230, 0), 
                                    (sep121, "left", 0, 0),  
                                    (sep121, "right", 0, 100),
                                    (self.txtTar, "left", 30, 0),
                                    (self.txtTar, "right", 0, 100),
                                    (sep122, "left", 0, 0),  
                                    (sep122, "right", 0, 100),
                                    (self.txt123, "left", 0, 0),
                                    (self.txt123, "right", 0, 100),
                                    (b121, "left", 0, 0),
                                    (b121, "right", 0, 40),
                                    (b122, "left", 0, 41),
                                    (b122, "right", 0, 100),
                                    (b123, "left", 0, 0),
                                    (b123, "right", 0, 100),
                                    (b124, "left", 0, 0),
                                    (b124, "right", 0, 40),
                                    (b125, "left", 0, 41),
                                    (b125, "right", 0, 100)])      
        cmds.setFocus(cmds.text(l=""))
        self.uiStuffClass.multiSetParent(3)
        column13= self.uiStuffClass.sepBoxSub()
        form13= cmds.formLayout(nd=100, p=column13)
        self.drop131= cmds.optionMenuGrp(l="", cw2=(0,10))
        cmds.menuItem(l="Arial")
        cmds.menuItem(l="Times New Roman")
        self.drop132= cmds.optionMenuGrp(l="", cw2=(15,10))
        cmds.menuItem(l="Normal")
        cmds.menuItem(l="Bold")
        cmds.menuItem(l="Italic")
        cmds.menuItem(l="Bold Italic") 
        cmds.optionMenuGrp(self.drop132, e=1, sl=2)
        self.txtCtrl= cmds.textFieldButtonGrp(l="", cw3=(0,50,50), adj=2, bl="  Text Ctrl  ", bc= lambda : self.textCurve())             
        cmds.formLayout(form13, e=1,
                                af=[(self.drop131, "top", 0),
                                    (self.drop132, "top", 0),
                                    (self.drop132, "left", 136),
                                    (self.txtCtrl, "top", 26)],
                                ap=[(self.txtCtrl, "left", 0, 0),
                                    (self.txtCtrl, "right", 0, 100)])            
        cmds.setFocus(cmds.text(l=""))
        self.uiStuffClass.multiSetParent(4)
        column21= self.uiStuffClass.sepBoxSub("Edit")
        form21= cmds.formLayout(nd=100, p=column21)
        self.rb211= cmds.radioButtonGrp(l="", cw4=(5,70,120,100), la3=["Pivot","Center Of Shape", "Distort Center"], nrb=3 , sl=1)
        self.drop211= cmds.optionMenuGrp(l="Rotate :", cw2=(45,10))
        cmds.menuItem(l="X")
        cmds.menuItem(l="Y")
        cmds.menuItem(l="Z")
        cmds.optionMenuGrp(self.drop211, e=1, sl=3)
        b211= cmds.button(l="Rotate Ctrl Shape", c=lambda x: self.rotateCtrlShape())
        cmds.formLayout(form21, e=1,
                                af=[(self.rb211, "top", 0),
                                    (self.drop211, "top", 26),
                                    (b211, "top", 60)],
                                ap=[(b211, "left", 0, 0),
                                    (b211, "right", 0, 100)]) 

        cmds.setFocus(cmds.text(l=""))
        self.uiStuffClass.multiSetParent(3)
        column22= self.uiStuffClass.sepBoxSub()
        form22= cmds.formLayout(nd=100, p=column22)
        self.rb221= cmds.radioButtonGrp(l="", cw3=(5,120,50), la2=["Transform Node","Shape Node"], nrb=2 , sl=2)
        self.rb222= cmds.radioButtonGrp(l="", cw5=(5,70,70,80,5), la4=["Disable","Enable","Template","Reference"], nrb=4 , sl=4)
        b221= cmds.button(l="Enable Override", c=lambda x: self.enOver())
        cmds.formLayout(form22, e=1,
                                af=[(self.rb221, "top", 0),
                                    (self.rb222, "top", 26),
                                    (b221, "top", 60)],
                                ap=[(b221, "left", 0, 0),
                                    (b221, "right", 0, 100)]) 
        cmds.setFocus(cmds.text(l=""))
        self.uiStuffClass.multiSetParent(4)
        column31= self.uiStuffClass.sepBoxSub("Color Changer")
        form31= cmds.formLayout(nd=100, p=column31)
        self.rb31= cmds.radioButtonGrp(l="", cw3=(5,120,100), la2=["Change Color","Select Ctrl With Color"], nrb=2 , sl=1)
        self.pale= cmds.palettePort(dim=(4,8), t=0, td=1, h=200, ced=0, cc=lambda : self.changeColor())
        cmds.palettePort(self.pale, e=1, rgb=(1, 0.00, 0.00, 0.00))
        cmds.palettePort(self.pale, e=1, rgb=(2, 0.25, 0.25, 0.25))
        cmds.palettePort(self.pale, e=1, rgb=(3, 0.50, 0.50, 0.50))
        cmds.palettePort(self.pale, e=1, rgb=(4, 0.61, 0.00, 0.16))
        cmds.palettePort(self.pale, e=1, rgb=(5, 0.00, 0.02, 0.37))
        cmds.palettePort(self.pale, e=1, rgb=(6, 0.00, 0.00, 1.00))
        cmds.palettePort(self.pale, e=1, rgb=(7, 0.00, 0.27, 0.10))
        cmds.palettePort(self.pale, e=1, rgb=(8, 0.15, 0.00, 0.26))
        cmds.palettePort(self.pale, e=1, rgb=(9, 0.78, 0.00, 0.78))
        cmds.palettePort(self.pale, e=1, rgb=(10, 0.54, 0.28, 0.20))
        cmds.palettePort(self.pale, e=1, rgb=(11, 0.25, 0.14, 0.12))
        cmds.palettePort(self.pale, e=1, rgb=(12, 0.60, 0.15, 0.00))
        cmds.palettePort(self.pale, e=1, rgb=(13, 1.00, 0.00, 0.00))
        cmds.palettePort(self.pale, e=1, rgb=(14, 0.00, 1.00, 0.00))
        cmds.palettePort(self.pale, e=1, rgb=(15, 0.00, 0.25, 0.60))
        cmds.palettePort(self.pale, e=1, rgb=(16, 1.00, 1.00, 1.00))
        cmds.palettePort(self.pale, e=1, rgb=(17, 1.00, 1.00, 0.00))
        cmds.palettePort(self.pale, e=1, rgb=(18,0.40, 0.86, 1.00))
        cmds.palettePort(self.pale, e=1, rgb=(19, 0.26, 1.00, 0.60))
        cmds.palettePort(self.pale, e=1, rgb=(20, 1.00, 0.70, 0.70))
        cmds.palettePort(self.pale, e=1, rgb=(21, 0.90, 0.68, 0.47))
        cmds.palettePort(self.pale, e=1, rgb=(22, 1.00, 1.00, 0.39))
        cmds.palettePort(self.pale, e=1, rgb=(23, 0.00, 0.60, 0.33))
        cmds.palettePort(self.pale, e=1, rgb=(24, 0.63, 0.41, 0.19))
        cmds.palettePort(self.pale, e=1, rgb=(25, 0.63, 0.63, 0.19))
        cmds.palettePort(self.pale, e=1, rgb=(26, 0.40, 0.63 , 0.19))
        cmds.palettePort(self.pale, e=1, rgb=(27, 0.19, 0.63, 0.36))
        cmds.palettePort(self.pale, e=1, rgb=(28, 0.19, 0.63, 0.60))
        cmds.palettePort(self.pale, e=1, rgb=(29, 0.19, 0.40, 0.60))
        cmds.palettePort(self.pale, e=1, rgb=(30, 0.43, 0.19, 0.60))
        cmds.palettePort(self.pale, e=1, rgb=(31, 0.63, 0.19, 0.40))  
        cmds.formLayout(form31, e=1,
                                af=[(self.rb31, "top", 0),
                                    (self.pale, "top", 50)],
                                ap=[(self.pale, "left", 0, 0),
                                    (self.pale, "right", 0, 100)]) 
        cmds.setFocus(cmds.text(l= ""))
        cmds.showWindow("ctrlM")

    def cbx01(self):
        if cmds.checkBoxGrp(self.cbTar, q=1, v1=1)==1:
            cmds.textFieldButtonGrp(self.txtTar, e=1, en=1)               
            cmds.text(self.txt123, e=1, l="Select CTRLS")
        else:
            cmds.textFieldButtonGrp(self.txtTar, e=1, en=0)               
            cmds.text(self.txt123, e=1, l="Select CTRL Then TARGETS")

    def grab(self):
        obj= cmds.ls(os=1, fl=1)
        if obj:      
            cmds.textFieldButtonGrp(self.txtTar, e=1, tx=", ".join(obj))                           
        else:
            cmds.warning("Select at least one target") 

    def generateAllShape(self):  
        test1= 1
        if cmds.checkBoxGrp(self.cb111, q=1, v1=1):
            try:
                cam= cmds.modelPanel(cmds.getPanel(wf=1), q=1, cam=1)
            except:
                test1= []
        if test1:
            self.uiStuffClass.loadingBar(1, 2)
            self.uiStuffClass.loadingBar(2)
            #1st  
            s01= cmds.curve(d=3, n="circle", p=[(0,0,-0.298),(0.211,0,-0.211),(0.298,0,0),(0.211,0,0.211),(0,0,0.298),(-0.211,0,0.211),(-0.298,0,0),(-0.211,0,-0.211)])
            cmds.closeCurve(s01, ps=0, rpo=1)
            cmds.xform(s01, t=(3,0,-3), ws=1)
            s02= cmds.curve(d=1, n="square", p=[(-0.25,0,-0.25), (0.25,0,-0.25), (0.25,0,0.25), (-0.25,0,0.25), (-0.25,0,-0.25)])
            cmds.xform(s02, t=(3,0,-2), ws=1)
            s03= cmds.curve(d=1, n="triangle", p=[(0,0,-0.267),(-0.327,0,0.267),(0.327,0,0.267),(0,0,-0.267)])
            cmds.xform(s03, t=(3,0,-1), ws=1)
            s04= cmds.curve(d=1, n="hexagon", p=[(-0.192,0,-0.317),(0.192,0,-0.317),(0.354,0,0),(0.192,0,0.317),(-0.192,0,0.317),(-0.354,0,0),(-0.192,0,-0.317)])
            cmds.xform(s04, t=(3,0,0), ws=1)
            s05= cmds.curve(d=1, n="octagon", p=[(-0.131,0,-0.317),(0.131,0,-0.317),(0.317,0,-0.131),(0.317,0,0.131),(0.131,0,0.317),(-0.131,0,0.317),(-0.317,0,0.131),(-0.317,0,-0.131),(-0.131,0,-0.317)])
            cmds.xform(s05, t=(3,0,1), ws=1)
            s06= cmds.curve(d=3, n="semiCircle", p=[(-0.205,0,-0.214),(0.205,0,-0.214),(0.25,0,0.18),(0.25,0,0.212),(0.205,0,0.212),(-0.205,0,0.212),(-0.25,0,0.212),(-0.25,0,0.18)])
            cmds.closeCurve(s06, ps=0, rpo=1)
            cmds.xform(s06, t=(3,0,2), ws=1)
            #2nd 
            s11= cmds.curve(d=3, n="drip", p=[(0,0,-0.57),(-0.285,0,0),(-0.23,0,0.167),(-0.088,0,0.271),(0.088,0,0.271),(0.23,0,0.167),(0.285,0,0),(0,0,-0.57)])
            cmds.xform(s11, t=(2,0,-3), ws=1)
            s12= cmds.curve(d=3, n="roundSquare", p=[(-0.25,0,-0.212),(-0.205,0,-0.25),(0.205,0,-0.25),(0.25,0,-0.212),(0.25,0,0.212),(0.205,0,0.25),(-0.205,0,0.25),(-0.25,0,0.212)])
            cmds.closeCurve(s12, ps=0, rpo=1)
            cmds.xform(s12, t=(2,0,-2), ws=1)
            s13= cmds.curve(d=3, n="eight", p=[(0,0,-0.067),(-0.199,0,-0.21),(-0.358,0,-0.183),(-0.446,0,-0.065),(-0.446,0,0.065),(-0.358,0,0.183),(-0.199,0,0.21),(0,0,0.067),(0.199,0,0.21),(0.358,0,0.183),(0.446,0,0.065),(0.446,0,-0.065),(0.358,0,-0.183),(0.199,0,-0.21)])
            cmds.closeCurve(s13, ps=0, rpo=1)
            cmds.xform(s13, t=(2,0,-1), ws=1)
            s14= cmds.curve(d=1, n="cross", p=[(-0.092,0,-0.356),(0.092,0,-0.356),(0.092,0,-0.092),(0.356,0,-0.092),(0.356,0,0.092),(0.092,0,0.092),(0.092,0,0.356),(-0.092,0,0.356),(-0.092,0,0.092),(-0.356,0,0.092),(-0.356,0,-0.092),(-0.092,0,-0.092),(-0.092,0,-0.356)])
            cmds.xform(s14, t=(2,0,0), ws=1)
            s15= cmds.curve(d=1, n="spike", p=[(0,0,-0.464),(0.121,0,-0.293),(0.328,0,-0.328),(0.293,0,-0.121),(0.464,0,0),(0.293,0,0.121),(0.328,0,0.328),(0.121,0,0.293),(0,0,0.464),(-0.121,0,0.293),(-0.328,0,0.328),(-0.293,0,0.121),(-0.464,0,0),(-0.293,0,-0.121),(-0.328,0,-0.328),(-0.121,0,-0.293),(0,0,-0.464)])
            cmds.xform(s15, t=(2,0,1), ws=1)
            s16= cmds.curve(d=1, n="doubleCircleSpread", p=[(0.274,0,-0.274),(0.313,0,-0.228),(0.345,0,-0.176),(0.368,0,-0.12),(0.383,0,-0.061),(0.387,0,0),(0.383,0,0.061),(0.368,0,0.12),(0.345,0,0.176),(0.313,0,0.228),(0.274,0,0.274),(0.228,0,0.313),(0.176,0,0.345),(0.12,0,0.368),(0.061,0,0.383),(0,0,0.387),(-0.061,0,0.383),(-0.12,0,0.368),(-0.176,0,0.345),(-0.228,0,0.313),(-0.274,0,0.274),(-0.313,0,0.228),(-0.345,0,0.176),(-0.368,0,0.12),(-0.383,0,0.061),(-0.387,0,0),(-0.383,0,-0.061),(-0.368,0,-0.12),(-0.345,0,-0.176),(-0.313,0,-0.228),(-0.274,0,-0.274),(-0.228,0,-0.313),(-0.176,0,-0.345),(-0.12,0,-0.368),(-0.061,0,-0.383),(0,0,-0.387),(0.061,0,-0.383),(0.12,0,-0.368),(0.176,0,-0.345),(0.228,0,-0.313),(0.274,0,-0.274),(0.201,0,-0.201),(0.23,0,-0.167),(0.253,0,-0.129),(0.27,0,-0.088),(0.28,0,-0.044),(0.284,0,0),(0.28,0,0.044),(0.27,0,0.088),(0.253,0,0.129),(0.23,0,0.167),(0.201,0,0.201),(0.274,0,0.274),(0.201,0,0.201),(0.167,0,0.23),(0.129,0,0.253),(0.088,0,0.27),(0.044,0,0.28),(0,0,0.284),(-0.044,0,0.28),(-0.088,0,0.27),(-0.129,0,0.253),(-0.167,0,0.23),(-0.201,0,0.201),(-0.274,0,0.274),(-0.201,0,0.201),(-0.23,0,0.167),(-0.253,0,0.129),(-0.27,0,0.088),(-0.28,0,0.044),(-0.284,0,0),(-0.28,0,-0.044),(-0.27,0,-0.088),(-0.253,0,-0.129),(-0.23,0,-0.167),(-0.201,0,-0.201),(-0.274,0,-0.274),(-0.201,0,-0.201),(-0.167,0,-0.23),(-0.129,0,-0.253),(-0.088,0,-0.27),(-0.044,0,-0.28),(0,0,-0.284),(0.044,0,-0.28),(0.088,0,-0.27),(0.129,0,-0.253),(0.167,0,-0.23),(0.201,0,-0.201)])
            cmds.xform(s16, t=(2,0,2), ws=1)
            s17= cmds.curve(d=1, n="doubleCircleUp", p=[(0.201,0.034,-0.201),(0.23,0.034,-0.167),(0.254,0.034,-0.129),(0.271,0.034,-0.088),(0.281,0.034,-0.045),(0.285,0.034,0),(0.281,0.034,0.045),(0.271,0.034,0.088),(0.254,0.034,0.129),(0.23,0.034,0.167),(0.201,0.034,0.201),(0.167,0.034,0.23),(0.129,0.034,0.254),(0.088,0.034,0.271),(0.045,0.034,0.281),(0,0.034,0.285),(-0.045,0.034,0.281),(-0.088,0.034,0.271),(-0.129,0.034,0.254),(-0.167,0.034,0.23),(-0.201,0.034,0.201),(-0.23,0.034,0.167),(-0.254,0.034,0.129),(-0.271,0.034,0.088),(-0.281,0.034,0.045),(-0.285,0.034,0),(-0.281,0.034,-0.045),(-0.271,0.034,-0.088),(-0.254,0.034,-0.129),(-0.23,0.034,-0.167),(-0.201,0.034,-0.201),(-0.167,0.034,-0.23),(-0.129,0.034,-0.254),(-0.088,0.034,-0.271),(-0.045,0.034,-0.281),(0,0.034,-0.285),(0.045,0.034,-0.281),(0.088,0.034,-0.271),(0.129,0.034,-0.254),(0.167,0.034,-0.23),(0.201,0.034,-0.201),(0.201,-0.034,-0.201),(0.23,-0.034,-0.167),(0.254,-0.034,-0.129),(0.271,-0.034,-0.088),(0.281,-0.034,-0.045),(0.285,-0.034,0),(0.281,-0.034,0.045),(0.271,-0.034,0.088),(0.254,-0.034,0.129),(0.23,-0.034,0.167),(0.201,-0.034,0.201),(0.201,0.034,0.201),(0.201,-0.034,0.201),(0.167,-0.034,0.23),(0.129,-0.034,0.254),(0.088,-0.034,0.271),(0.045,-0.034,0.281),(0,-0.034,0.285),(-0.045,-0.034,0.281),(-0.088,-0.034,0.271),(-0.129,-0.034,0.254),(-0.167,-0.034,0.23),(-0.201,-0.034,0.201),(-0.201,0.034,0.201),(-0.201,-0.034,0.201),(-0.23,-0.034,0.167),(-0.254,-0.034,0.129),(-0.271,-0.034,0.088),(-0.281,-0.034,0.045),(-0.285,-0.034,0),(-0.281,-0.034,-0.045),(-0.271,-0.034,-0.088),(-0.254,-0.034,-0.129),(-0.23,-0.034,-0.167),(-0.201,-0.034,-0.201),(-0.201,0.034,-0.201),(-0.201,-0.034,-0.201),(-0.167,-0.034,-0.23),(-0.129,-0.034,-0.254),(-0.088,-0.034,-0.271),(-0.045,-0.034,-0.281),(0,-0.034,-0.285),(0.045,-0.034,-0.281),(0.088,-0.034,-0.271),(0.129,-0.034,-0.254),(0.167,-0.034,-0.23),(0.201,-0.034,-0.201)])
            cmds.xform(s17, t=(2,0,3), ws=1)
            s18= cmds.curve(d=3, n="doubleRoundSemiCircle", p=[(0,0,-0.377),(0.173,0,-0.333),(0.306,0,-0.215),(0.356,0,-0.09),(0.326,0,-0.016),(0.236,0,-0.017),(0.173,0,-0.182),(0,0,-0.248),(-0.173,0,-0.182),(-0.236,0,-0.017),(-0.326,0,-0.016),(-0.356,0,-0.09),(-0.306,0,-0.215),(-0.173,0,-0.333)])
            cmds.closeCurve(s18, ps=0, rpo=1)
            cmds.xform(s18, t=(2,0,4), ws=1)
            #3rd
            s21= cmds.curve(d=1, n="sphere", p=[(0,0,-0.285),(0.045,0,-0.281),(0.088,0,-0.271),(0.129,0,-0.254),(0.167,0,-0.23),(0.201,0,-0.201),(0.23,0,-0.167),(0.254,0,-0.129),(0.271,0,-0.088),(0.281,0,-0.045),(0.285,0,0),(0.281,0,0.045),(0.271,0,0.088),(0.254,0,0.129),(0.23,0,0.167),(0.201,0,0.201),(0.167,0,0.23),(0.129,0,0.254),(0.088,0,0.271),(0.045,0,0.281),(0,0,0.285),(-0.045,0,0.281),(-0.088,0,0.271),(-0.129,0,0.254),(-0.167,0,0.23),(-0.201,0,0.201),(-0.23,0,0.167),(-0.254,0,0.129),(-0.271,0,0.088),(-0.281,0,0.045),(-0.285,0,0),(-0.281,0,-0.045),(-0.271,0,-0.088),(-0.254,0,-0.129),(-0.23,0,-0.167),(-0.201,0,-0.201),(-0.167,0,-0.23),(-0.129,0,-0.254),(-0.088,0,-0.271),(-0.045,0,-0.281),(0,0,-0.285),(0,0.045,-0.281),(0,0.088,-0.271),(0,0.129,-0.254),(0,0.167,-0.23),(0,0.201,-0.201),(0,0.23,-0.167),(0,0.254,-0.129),(0,0.271,-0.088),(0,0.281,-0.045),(0,0.285,0),(0,0.281,0.045),(0,0.271,0.088),(0,0.254,0.129),(0,0.23,0.167),(0,0.201,0.201),(0,0.167,0.23),(0,0.129,0.254),(0,0.088,0.271),(0,0.045,0.281),(0,0,0.285),(0,-0.045,0.281),(0,-0.088,0.271),(0,-0.129,0.254),(0,-0.167,0.23),(0,-0.201,0.201),(0,-0.23,0.167),(0,-0.254,0.129),(0,-0.271,0.088),(0,-0.281,0.045),(0,-0.285,0),(0,-0.281,-0.045),(0,-0.271,-0.088),(0,-0.254,-0.129),(0,-0.23,-0.167),(0,-0.201,-0.201),(0,-0.167,-0.23),(0,-0.129,-0.254),(0,-0.088,-0.271),(0,-0.045,-0.281),(0,0,-0.285),(0,0.045,-0.281),(0,0.088,-0.271),(0,0.129,-0.254),(0,0.167,-0.23),(0,0.201,-0.201),(0,0.23,-0.167),(0,0.254,-0.129),(0,0.271,-0.088),(0,0.281,-0.045),(0,0.285,0),(0.045,0.281,0),(0.088,0.271,0),(0.129,0.254,0),(0.167,0.23,0),(0.201,0.201,0),(0.23,0.167,0),(0.254,0.129,0),(0.271,0.088,0),(0.281,0.045,0),(0.285,0,0),(0.281,-0.045,0),(0.271,-0.088,0),(0.254,-0.129,0),(0.23,-0.167,0),(0.201,-0.201,0),(0.167,-0.23,0),(0.129,-0.254,0),(0.088,-0.271,0),(0.045,-0.281,0),(0,-0.285,0),(-0.045,-0.281,0),(-0.088,-0.271,0),(-0.129,-0.254,0),(-0.167,-0.23,0),(-0.201,-0.201,0),(-0.23,-0.167,0),(-0.254,-0.129,0),(-0.271,-0.088,0),(-0.281,-0.045,0),(-0.285,0,0),(-0.281,0.045,0),(-0.271,0.088,0),(-0.254,0.129,0),(-0.23,0.167,0),(-0.201,0.201,0),(-0.167,0.23,0),(-0.129,0.254,0),(-0.088,0.271,0),(-0.045,0.281,0),(0,0.285,0)])
            cmds.xform(s21, t=(1,0,-3), ws=1)
            s22= cmds.curve(d=1, n="cube", p=[(-0.25,0.25,0.25), (-0.25,0.25,-0.25), (0.25,0.25,-0.25), (0.25,0.25,0.25), (-0.25,0.25,0.25), (-0.25,-0.25,0.25), (0.25,-0.25,0.25), (0.25,0.25,0.25), (0.25,-0.25,0.25), (0.25,-0.25,-0.25), (0.25,0.25,-0.25), (0.25,-0.25,-0.25), (-0.25,-0.25,-0.25), (-0.25,0.25,-0.25), (-0.25,-0.25,-0.25), (-0.25,-0.25,0.25)])
            cmds.xform(s22, t=(1,0,-2), ws=1)
            s23= cmds.curve(d=1, n="pyramid", p=[(0,0.553,0),(-0.251,0,0.251),(0.251,0,0.251),(0,0.553,0),(0.251,0,-0.251),(0.251,0,0.251),(0.251,0,-0.251),(-0.251,0,-0.251),(0,0.553,0),(-0.251,0,-0.251),(-0.251,0,0.251)])
            cmds.xform(s23, t=(1,0,-1), ws=1)
            s24= cmds.curve(d=1, n="cylinder", p=[(0,0.25,-0.262),(0.041,0.25,-0.259),(0.081,0.25,-0.249),(0.119,0.25,-0.233),(0.154,0.25,-0.212),(0.185,0.25,-0.185),(0.212,0.25,-0.154),(0.233,0.25,-0.119),(0.249,0.25,-0.081),(0.259,0.25,-0.041),(0.262,0.25,0),(0.259,0.25,0.041),(0.249,0.25,0.081),(0.233,0.25,0.119),(0.212,0.25,0.154),(0.185,0.25,0.185),(0.154,0.25,0.212),(0.119,0.25,0.233),(0.081,0.25,0.249),(0.041,0.25,0.259),(0,0.25,0.262),(-0.041,0.25,0.259),(-0.081,0.25,0.249),(-0.119,0.25,0.233),(-0.154,0.25,0.212),(-0.185,0.25,0.185),(-0.212,0.25,0.154),(-0.233,0.25,0.119),(-0.249,0.25,0.081),(-0.259,0.25,0.041),(-0.262,0.25,0),(-0.259,0.25,-0.041),(-0.249,0.25,-0.081),(-0.233,0.25,-0.119),(-0.212,0.25,-0.154),(-0.185,0.25,-0.185),(-0.154,0.25,-0.212),(-0.119,0.25,-0.233),(-0.081,0.25,-0.249),(-0.041,0.25,-0.259),(0,0.25,-0.262),(0,-0.25,-0.262),(0.041,-0.25,-0.259),(0.081,-0.25,-0.249),(0.119,-0.25,-0.233),(0.154,-0.25,-0.212),(0.185,-0.25,-0.185),(0.185,0.25,-0.185),(0.185,-0.25,-0.185),(0.212,-0.25,-0.154),(0.233,-0.25,-0.119),(0.249,-0.25,-0.081),(0.259,-0.25,-0.041),(0.262,-0.25,0),(0.262,0.25,0),(0.262,-0.25,0),(0.259,-0.25,0.041),(0.249,-0.25,0.081),(0.233,-0.25,0.119),(0.212,-0.25,0.154),(0.185,-0.25,0.185),(0.185,0.25,0.185),(0.185,-0.25,0.185),(0.154,-0.25,0.212),(0.119,-0.25,0.233),(0.081,-0.25,0.249),(0.041,-0.25,0.259),(0,-0.25,0.262),(0,0.25,0.262),(0,-0.25,0.262),(-0.041,-0.25,0.259),(-0.081,-0.25,0.249),(-0.119,-0.25,0.233),(-0.154,-0.25,0.212),(-0.185,-0.25,0.185),(-0.185,0.25,0.185),(-0.185,-0.25,0.185),(-0.212,-0.25,0.154),(-0.233,-0.25,0.119),(-0.249,-0.25,0.081),(-0.259,-0.25,0.041),(-0.262,-0.25,0),(-0.262,0.25,0),(-0.262,-0.25,0),(-0.259,-0.25,-0.041),(-0.249,-0.25,-0.081),(-0.233,-0.25,-0.119),(-0.212,-0.25,-0.154),(-0.185,-0.25,-0.185),(-0.185,0.25,-0.185),(-0.185,-0.25,-0.185),(-0.154,-0.25,-0.212),(-0.119,-0.25,-0.233),(-0.081,-0.25,-0.249),(-0.041,-0.25,-0.259),(0,-0.25,-0.262)])
            cmds.xform(s24, t=(1,0,0), ws=1)
            s25= cmds.curve(d=1, n="lowCylinder", p=[(0,0.25,-0.262),(0.041,0.25,-0.259),(0.081,0.25,-0.249),(0.119,0.25,-0.233),(0.154,0.25,-0.212),(0.185,0.25,-0.185),(0.212,0.25,-0.154),(0.233,0.25,-0.119),(0.249,0.25,-0.081),(0.259,0.25,-0.041),(0.262,0.25,0),(0.259,0.25,0.041),(0.249,0.25,0.081),(0.233,0.25,0.119),(0.212,0.25,0.154),(0.185,0.25,0.185),(0.154,0.25,0.212),(0.119,0.25,0.233),(0.081,0.25,0.249),(0.041,0.25,0.259),(0,0.25,0.262),(-0.041,0.25,0.259),(-0.081,0.25,0.249),(-0.119,0.25,0.233),(-0.154,0.25,0.212),(-0.185,0.25,0.185),(-0.212,0.25,0.154),(-0.233,0.25,0.119),(-0.249,0.25,0.081),(-0.259,0.25,0.041),(-0.262,0.25,0),(-0.259,0.25,-0.041),(-0.249,0.25,-0.081),(-0.233,0.25,-0.119),(-0.212,0.25,-0.154),(-0.185,0.25,-0.185),(-0.154,0.25,-0.212),(-0.119,0.25,-0.233),(-0.081,0.25,-0.249),(-0.041,0.25,-0.259),(0,0.25,-0.262),(0,-0.25,-0.262),(0.041,-0.25,-0.259),(0.081,-0.25,-0.249),(0.119,-0.25,-0.233),(0.154,-0.25,-0.212),(0.185,-0.25,-0.185),(0.212,-0.25,-0.154),(0.233,-0.25,-0.119),(0.249,-0.25,-0.081),(0.259,-0.25,-0.041),(0.262,-0.25,0),(0.262,0.25,0),(0.262,-0.25,0),(0.259,-0.25,0.041),(0.249,-0.25,0.081),(0.233,-0.25,0.119),(0.212,-0.25,0.154),(0.185,-0.25,0.185),(0.154,-0.25,0.212),(0.119,-0.25,0.233),(0.081,-0.25,0.249),(0.041,-0.25,0.259),(0,-0.25,0.262),(0,0.25,0.262),(0,-0.25,0.262),(-0.041,-0.25,0.259),(-0.081,-0.25,0.249),(-0.119,-0.25,0.233),(-0.154,-0.25,0.212),(-0.185,-0.25,0.185),(-0.212,-0.25,0.154),(-0.233,-0.25,0.119),(-0.249,-0.25,0.081),(-0.259,-0.25,0.041),(-0.262,-0.25,0),(-0.262,0.25,0),(-0.262,-0.25,0),(-0.259,-0.25,-0.041),(-0.249,-0.25,-0.081),(-0.233,-0.25,-0.119),(-0.212,-0.25,-0.154),(-0.185,-0.25,-0.185),(-0.154,-0.25,-0.212),(-0.119,-0.25,-0.233),(-0.081,-0.25,-0.249),(-0.041,-0.25,-0.259),(0,-0.25,-0.262)])
            cmds.xform(s25, t=(1,0,1), ws=1)
            s26= cmds.curve(d=1, n="octaCylinder", p=[(0,0.25,-0.263),(0.186,0.25,-0.186),(0.263,0.25,0),(0.186,0.25,0.186),(0,0.25,0.263),(-0.186,0.25,0.186),(-0.263,0.25,0),(-0.186,0.25,-0.186),(0,0.25,-0.263),(0,-0.25,-0.263),(0.186,-0.25,-0.186),(0.186,0.25,-0.186),(0.186,-0.25,-0.186),(0.263,-0.25,0),(0.263,0.25,0),(0.263,-0.25,0),(0.186,-0.25,0.186),(0.186,0.25,0.186),(0.186,-0.25,0.186),(0,-0.25,0.263),(0,0.25,0.263),(0,-0.25,0.263),(-0.186,-0.25,0.186),(-0.186,0.25,0.186),(-0.186,-0.25,0.186),(-0.263,-0.25,0),(-0.263,0.25,0),(-0.263,-0.25,0),(-0.186,-0.25,-0.186),(-0.186,0.25,-0.186),(-0.186,-0.25,-0.186),(0,-0.25,-0.263)])
            cmds.xform(s26, t=(1,0,2), ws=1)
            s27= cmds.curve(d=1, n="hexaCylinder", p=[(0,0.25,-0.263),(0.221,0.25,-0.126),(0.221,0.25,0.126),(0,0.25,0.263),(-0.221,0.25,0.126),(-0.221,0.25,-0.126),(0,0.25,-0.263),(0,-0.25,-0.263),(0.221,-0.25,-0.126),(0.221,0.25,-0.126),(0.221,-0.25,-0.126),(0.221,-0.25,0.126),(0.221,0.25,0.126),(0.221,-0.25,0.126),(0,-0.25,0.263),(0,0.25,0.263),(0,-0.25,0.263),(-0.221,-0.25,0.126),(-0.221,0.25,0.126),(-0.221,-0.25,0.126),(-0.221,-0.25,-0.126),(-0.221,0.25,-0.126),(-0.221,-0.25,-0.126),(0,-0.25,-0.263)])
            cmds.xform(s27, t=(1,0,3), ws=1)
            s28= cmds.curve(d=1, n="semiSphere", p=[(0,0,-0.285),(0.045,0,-0.281),(0.088,0,-0.271),(0.129,0,-0.254),(0.167,0,-0.23),(0.201,0,-0.201),(0.23,0,-0.167),(0.254,0,-0.129),(0.271,0,-0.088),(0.281,0,-0.045),(0.285,0,0),(0.281,0,0.045),(0.271,0,0.088),(0.254,0,0.129),(0.23,0,0.167),(0.201,0,0.201),(0.167,0,0.23),(0.129,0,0.254),(0.088,0,0.271),(0.045,0,0.281),(0,0,0.285),(-0.045,0,0.281),(-0.088,0,0.271),(-0.129,0,0.254),(-0.167,0,0.23),(-0.201,0,0.201),(-0.23,0,0.167),(-0.254,0,0.129),(-0.271,0,0.088),(-0.281,0,0.045),(-0.285,0,0),(-0.281,0,-0.045),(-0.271,0,-0.088),(-0.254,0,-0.129),(-0.23,0,-0.167),(-0.201,0,-0.201),(-0.167,0,-0.23),(-0.129,0,-0.254),(-0.088,0,-0.271),(-0.045,0,-0.281),(0,0,-0.285),(0,0.045,-0.281),(0,0.088,-0.271),(0,0.129,-0.254),(0,0.167,-0.23),(0,0.201,-0.201),(0,0.23,-0.167),(0,0.254,-0.129),(0,0.271,-0.088),(0,0.281,-0.045),(0,0.285,0),(0,0.281,0.045),(0,0.271,0.088),(0,0.254,0.129),(0,0.23,0.167),(0,0.201,0.201),(0,0.167,0.23),(0,0.129,0.254),(0,0.088,0.271),(0,0.045,0.281),(0,0,0.285),(0,0,0),(0,0,-0.285),(-0.045,0,-0.281),(-0.088,0,-0.271),(-0.129,0,-0.254),(-0.167,0,-0.23),(-0.201,0,-0.201),(-0.23,0,-0.167),(-0.254,0,-0.129),(-0.271,0,-0.088),(-0.281,0,-0.045),(-0.285,0,0),(-0.281,0.045,0),(-0.271,0.088,0),(-0.254,0.129,0),(-0.23,0.167,0),(-0.201,0.201,0),(-0.167,0.23,0),(-0.129,0.254,0),(-0.088,0.271,0),(-0.045,0.281,0),(0,0.285,0),(0.045,0.281,0),(0.088,0.271,0),(0.129,0.254,0),(0.167,0.23,0),(0.201,0.201,0),(0.23,0.167,0),(0.254,0.129,0),(0.271,0.088,0),(0.281,0.045,0),(0.285,0,0),(0,0,0),(-0.285,0,0)])
            cmds.xform(s28, t=(1,0,4), ws=1)
            #4th
            s31= cmds.curve(d=1, n="arrow", p=[(-0.369,0,-0.061),(0.123,0,-0.061),(0.123,0,-0.184),(0.369,0,0),(0.123,0,0.184),(0.123,0,0.061),(-0.369,0,0.061),(-0.369,0,-0.061)])
            cmds.xform(s31, t=(0,0,-3), ws=1)
            s32= cmds.curve(d=1, n="doubleArrow", p=[(-0.246,0,-0.061),(-0.185,0,-0.061),(-0.123,0,-0.061),(-0.062,0,-0.061),(0,0,-0.061),(0.062,0,-0.061),(0.123,0,-0.061),(0.185,0,-0.061),(0.246,0,-0.061),(0.246,0,-0.111),(0.246,0,-0.184),(0.295,0,-0.148),(0.344,0,-0.111),(0.394,0,-0.074),(0.443,0,-0.037),(0.492,0,0),(0.443,0,0.037),(0.394,0,0.074),(0.344,0,0.111),(0.295,0,0.148),(0.246,0,0.184),(0.246,0,0.111),(0.246,0,0.061),(0.185,0,0.061),(0.123,0,0.061),(0.062,0,0.061),(0,0,0.061),(-0.062,0,0.061),(-0.123,0,0.061),(-0.185,0,0.061),(-0.246,0,0.061),(-0.246,0,0.111),(-0.246,0,0.184),(-0.295,0,0.148),(-0.344,0,0.111),(-0.394,0,0.074),(-0.443,0,0.037),(-0.492,0,0),(-0.443,0,-0.037),(-0.394,0,-0.074),(-0.344,0,-0.111),(-0.295,0,-0.148),(-0.246,0,-0.184),(-0.246,0,-0.111),(-0.246,0,-0.061)])
            cmds.xform(s32, t=(0,0,-2), ws=1)
            s33= cmds.curve(d=3, n="uTurnArrow", p=[(0,0,-0.408),(0.126,0,-0.388),(0.24,0,-0.33),(0.331,0,-0.24),(0.389,0,-0.126),(0.409,0,0),(0.409,0,0),(0.409,0,0),(0.501,0,0),(0.501,0,0),(0.501,0,0),(0.362,0,0.185),(0.362,0,0.185),(0.362,0,0.185),(0.224,0,0),(0.224,0,0),(0.224,0,0),(0.316,0,0),(0.316,0,0),(0.316,0,0),(0.301,0,-0.098),(0.256,0,-0.186),(0.186,0,-0.256),(0.098,0,-0.301),(0,0,-0.316),(-0.098,0,-0.301),(-0.186,0,-0.256),(-0.256,0,-0.186),(-0.301,0,-0.098),(-0.316,0,0),(-0.316,0,0),(-0.316,0,0),(-0.224,0,0),(-0.224,0,0),(-0.224,0,0),(-0.362,0,0.185),(-0.362,0,0.185),(-0.362,0,0.185),(-0.501,0,0),(-0.501,0,0),(-0.501,0,0),(-0.408,0,0),(-0.408,0,0),(-0.408,0,0),(-0.388,0,-0.126),(-0.33,0,-0.24),(-0.24,0,-0.33),(-0.126,0,-0.388)])
            cmds.closeCurve(s33, ps=0, rpo=1)
            cmds.xform(s33, t=(0,0,-1), ws=1)
            s34= cmds.curve(d=3, n="oneWayRotateArrow", p=[(0,0,-0.408),(0.126,0,-0.388),(0.24,0,-0.33),(0.331,0,-0.24),(0.389,0,-0.126),(0.409,0,0),(0.409,0,0),(0.409,0,0),(0.501,0,0),(0.501,0,0),(0.501,0,0),(0.362,0,0.185),(0.362,0,0.185),(0.362,0,0.185),(0.224,0,0),(0.224,0,0),(0.224,0,0),(0.316,0,0),(0.316,0,0),(0.316,0,0),(0.301,0,-0.098),(0.256,0,-0.186),(0.186,0,-0.256),(0.098,0,-0.301),(0,0,-0.316),(-0.098,0,-0.301),(-0.186,0,-0.256),(-0.256,0,-0.186),(-0.301,0,-0.098),(-0.316,0,0),(-0.301,0,0.098),(-0.256,0,0.186),(-0.186,0,0.256),(-0.098,0,0.301),(0,0,0.316),(0,0,0.316),(0,0,0.316),(0,0,0.408),(0,0,0.408),(0,0,0.408),(-0.126,0,0.388),(-0.24,0,0.33),(-0.33,0,0.24),(-0.388,0,0.126),(-0.408,0,0),(-0.388,0,-0.126),(-0.33,0,-0.24),(-0.24,0,-0.33),(-0.126,0,-0.388)])
            cmds.closeCurve(s34, ps=0, rpo=1)
            cmds.xform(s34, t=(0,0,0), ws=1)      
            s35= cmds.curve(d=3, n="doubleSemiCircle", p=[(0,0,-0.416),(0.159,0,-0.384),(0.294,0,-0.294),(0.384,0,-0.159),(0.416,0,0),(0.416,0,0),(0.416,0,0),(0.324,0,0),(0.324,0,0),(0.324,0,0),(0.299,0,-0.124),(0.229,0,-0.229),(0.124,0,-0.299),(0,0,-0.324),(-0.124,0,-0.299),(-0.229,0,-0.229),(-0.299,0,-0.124),(-0.324,0,0),(-0.324,0,0),(-0.324,0,0),(-0.416,0,0),(-0.416,0,0),(-0.416,0,0),(-0.384,0,-0.159),(-0.294,0,-0.294),(-0.159,0,-0.384)])
            cmds.closeCurve(s35, ps=0, rpo=1)
            cmds.xform(s35, t=(0,0,1), ws=1)    
            #5th
            s41= cmds.curve(d=1, n="pyramidArrow", p=[(0.044,0.141,-0.141),(0.044,-0.141,-0.141),(0.044,-0.141,0.141),(0.044,0.141,0.141),(0.044,0.141,-0.141),(0.355,0,0),(0.044,0.141,0.141),(0.044,-0.141,0.141),(0.355,0,0),(0.044,-0.141,-0.141),(0.355,0,0),(0.044,0,0),(-0.355,0,0)])
            cmds.xform(s41, t=(-1,0,-3), ws=1) 
            s42= cmds.curve(d=1, n="doublePyramidArrow", p=[(0.316,0.052,-0.052),(0.316,-0.052,-0.052),(0.316,-0.052,0.052),(0.316,0.052,0.052),(0.316,0.052,-0.052),(0.43,0,0),(0.316,0.052,0.052),(0.43,0,0),(0.316,-0.052,0.052),(0.43,0,0),(0.316,-0.052,-0.052),(0.43,0,0),(0.316,0,0),(-0.316,0,0),(-0.43,0,0),(-0.316,0.052,-0.052),(-0.43,0,0),(-0.316,0.052,0.052),(-0.43,0,0),(-0.316,-0.052,0.052),(-0.43,0,0),(-0.316,-0.052,-0.052),(-0.316,-0.052,0.052),(-0.316,0.052,0.052),(-0.316,0.052,-0.052),(-0.316,-0.052,-0.052)])
            cmds.xform(s42, t=(-1,0,-2), ws=1) 
            s43= cmds.curve(d=1, n="doubleBendArrow", p=[(-0.292,0.08,-0.056),(-0.229,0.08,-0.088),(-0.157,0.08,-0.112),(-0.08,0.08,-0.126),(0,0.08,-0.131),(0.08,0.08,-0.126),(0.157,0.08,-0.112),(0.229,0.08,-0.088),(0.292,0.08,-0.056),(0.292,0.145,-0.056),(0.292,0.24,-0.056),(0.336,0.193,-0.025),(0.373,0.145,0.01),(0.401,0.097,0.048),(0.421,0.048,0.089),(0.432,0,0.131),(0.421,-0.048,0.089),(0.401,-0.097,0.048),(0.373,-0.145,0.01),(0.336,-0.193,-0.025),(0.292,-0.24,-0.056),(0.292,-0.145,-0.056),(0.292,-0.08,-0.056),(0.229,-0.08,-0.088),(0.157,-0.08,-0.112),(0.08,-0.08,-0.126),(0,-0.08,-0.131),(-0.08,-0.08,-0.126),(-0.157,-0.08,-0.112),(-0.229,-0.08,-0.088),(-0.292,-0.08,-0.056),(-0.292,-0.145,-0.056),(-0.292,-0.24,-0.056),(-0.336,-0.193,-0.025),(-0.373,-0.145,0.01),(-0.401,-0.097,0.048),(-0.421,-0.048,0.089),(-0.432,0,0.131),(-0.421,0.048,0.089),(-0.401,0.097,0.048),(-0.373,0.145,0.01),(-0.336,0.193,-0.025),(-0.292,0.24,-0.056),(-0.292,0.145,-0.056),(-0.292,0.08,-0.056)])
            cmds.xform(s43, t=(-1,0,-1), ws=1) 
            s44= cmds.curve(d=3, n="doubleArc", p=[(0,0.324,-0.05),(0.124,0.299,-0.05),(0.229,0.229,-0.05),(0.299,0.124,-0.05),(0.324,0,-0.05),(0.324,0,-0.05),(0.324,0,-0.05),(0.324,0,0.05),(0.324,0,0.05),(0.324,0,0.05),(0.299,0.124,0.05),(0.229,0.229,0.05),(0.124,0.299,0.05),(0,0.324,0.05),(-0.124,0.299,0.05),(-0.229,0.229,0.05),(-0.299,0.124,0.05),(-0.324,0,0.05),(-0.324,0,0.05),(-0.324,0,0.05),(-0.324,0,-0.05),(-0.324,0,-0.05),(-0.324,0,-0.05),(-0.299,0.124,-0.05),(-0.229,0.229,-0.05),(-0.124,0.299,-0.05)])
            cmds.closeCurve(s44, ps=0, rpo=1)
            cmds.xform(s44, t=(-1,0,0), ws=1) 
            #6th
            s51= cmds.curve(d=1, n="omniArrow", p=[(0.051,0,-0.071),(0.071,0,-0.051),(0.143,0,-0.051),(0.214,0,-0.051),(0.285,0,-0.051),(0.285,0,-0.134),(0.439,0,0),(0.285,0,0.134),(0.285,0,0.051),(0.214,0,0.051),(0.143,0,0.051),(0.071,0,0.051),(0.051,0,0.071),(0.051,0,0.143),(0.051,0,0.214),(0.051,0,0.285),(0.134,0,0.285),(0,0,0.439),(-0.134,0,0.285),(-0.051,0,0.285),(-0.051,0,0.214),(-0.051,0,0.143),(-0.051,0,0.071),(-0.071,0,0.051),(-0.143,0,0.051),(-0.214,0,0.051),(-0.285,0,0.051),(-0.285,0,0.134),(-0.439,0,0),(-0.285,0,-0.134),(-0.285,0,-0.051),(-0.214,0,-0.051),(-0.143,0,-0.051),(-0.071,0,-0.051),(-0.051,0,-0.071),(-0.051,0,-0.143),(-0.051,0,-0.214),(-0.051,0,-0.285),(-0.134,0,-0.285),(0,0,-0.439),(0.134,0,-0.285),(0.051,0,-0.285),(0.051,0,-0.214),(0.051,0,-0.143),(0.051,0,-0.071)])
            cmds.xform(s51, t=(-2,0,-3), ws=1)
            s52= cmds.curve(d=1, n="omniSquareArrow", p=[(-0.051,0,-0.285),(-0.134,0,-0.285),(0,0,-0.439),(0.134,0,-0.285),(0.051,0,-0.285),(0.051,0,-0.204),(0.202,0,-0.204),(0.202,0,-0.051),(0.285,0,-0.051),(0.285,0,-0.134),(0.439,0,0),(0.285,0,0.134),(0.285,0,0.051),(0.202,0,0.051),(0.202,0,0.204),(0.051,0,0.204),(0.051,0,0.285),(0.134,0,0.285),(0,0,0.439),(-0.134,0,0.285),(-0.051,0,0.285),(-0.051,0,0.204),(-0.202,0,0.204),(-0.202,0,0.051),(-0.285,0,0.051),(-0.285,0,0.134),(-0.439,0,0),(-0.285,0,-0.134),(-0.285,0,-0.051),(-0.202,0,-0.051),(-0.202,0,-0.204),(-0.051,0,-0.204),(-0.051,0,-0.285)])
            cmds.xform(s52, t=(-2,0,-2), ws=1)
            s53= cmds.curve(d=1, n="omniCircleArrow", p=[(0,0,-0.439),(0.134,0,-0.285),(0.055,0,-0.285),(0.055,0,-0.204),(0.081,0,-0.195),(0.105,0,-0.182),(0.128,0,-0.167),(0.149,0,-0.149),(0.167,0,-0.128),(0.182,0,-0.105),(0.195,0,-0.081),(0.204,0,-0.055),(0.285,0,-0.055),(0.285,0,-0.134),(0.439,0,0),(0.285,0,0.134),(0.285,0,0.055),(0.204,0,0.055),(0.195,0,0.081),(0.182,0,0.105),(0.167,0,0.128),(0.149,0,0.149),(0.128,0,0.167),(0.105,0,0.182),(0.081,0,0.195),(0.055,0,0.204),(0.055,0,0.285),(0.134,0,0.285),(0,0,0.439),(-0.134,0,0.285),(-0.055,0,0.285),(-0.055,0,0.204),(-0.081,0,0.195),(-0.105,0,0.182),(-0.128,0,0.167),(-0.149,0,0.149),(-0.167,0,0.128),(-0.182,0,0.105),(-0.195,0,0.081),(-0.204,0,0.055),(-0.285,0,0.055),(-0.285,0,0.134),(-0.439,0,0),(-0.285,0,-0.134),(-0.285,0,-0.055),(-0.204,0,-0.055),(-0.195,0,-0.081),(-0.182,0,-0.105),(-0.167,0,-0.128),(-0.149,0,-0.149),(-0.128,0,-0.167),(-0.105,0,-0.182),(-0.081,0,-0.195),(-0.055,0,-0.204),(-0.055,0,-0.285),(-0.134,0,-0.285),(0,0,-0.439)])
            cmds.xform(s53, t=(-2,0,-1), ws=1)
            #7th
            s61= cmds.curve(d=1, n="omniLevitateArrow", p=[(-0.051,0.036,-0.285),(-0.134,0.036,-0.285),(0,0.036,-0.439),(0.134,0.036,-0.285),(0.051,0.036,-0.285),(0.051,0,-0.285),(0.051,0,-0.214),(0.051,0,-0.143),(0.051,0,-0.071),(0.071,0,-0.051),(0.143,0,-0.051),(0.214,0,-0.051),(0.285,0,-0.051),(0.285,0.036,-0.051),(0.285,0.036,-0.134),(0.439,0.036,0),(0.285,0.036,0.134),(0.285,0.036,0.051),(0.285,0,0.051),(0.214,0,0.051),(0.143,0,0.051),(0.071,0,0.051),(0.051,0,0.071),(0.051,0,0.143),(0.051,0,0.214),(0.051,0,0.285),(0.051,0.036,0.285),(0.134,0.036,0.285),(0,0.036,0.439),(-0.134,0.036,0.285),(-0.051,0.036,0.285),(-0.051,0,0.285),(-0.051,0,0.214),(-0.051,0,0.143),(-0.051,0,0.071),(-0.071,0,0.051),(-0.143,0,0.051),(-0.214,0,0.051),(-0.285,0,0.051),(-0.285,0.036,0.051),(-0.285,0.036,0.134),(-0.439,0.036,0),(-0.285,0.036,-0.134),(-0.285,0.036,-0.051),(-0.285,0,-0.051),(-0.214,0,-0.051),(-0.143,0,-0.051),(-0.071,0,-0.051),(-0.051,0,-0.071),(-0.051,0,-0.143),(-0.051,0,-0.214),(-0.051,0,-0.285),(-0.051,0.036,-0.285)])
            cmds.xform(s61, t=(-3,0,-3), ws=1)
            s62= cmds.curve(d=1, n="omniLevitateSquareArrow", p=[(-0.051,0,-0.204),(-0.051,0,-0.285),(-0.051,0.036,-0.285),(-0.134,0.036,-0.285),(0,0.036,-0.439),(0.134,0.036,-0.285),(0.051,0.036,-0.285),(0.051,0,-0.285),(0.051,0,-0.204),(0.202,0,-0.204),(0.202,0,-0.051),(0.285,0,-0.051),(0.285,0.036,-0.051),(0.285,0.036,-0.134),(0.439,0.036,0),(0.285,0.036,0.134),(0.285,0.036,0.051),(0.285,0,0.051),(0.202,0,0.051),(0.202,0,0.204),(0.051,0,0.204),(0.051,0,0.285),(0.051,0.036,0.285),(0.134,0.036,0.285),(0,0.036,0.439),(-0.134,0.036,0.285),(-0.051,0.036,0.285),(-0.051,0,0.285),(-0.051,0,0.204),(-0.202,0,0.204),(-0.202,0,0.051),(-0.285,0,0.051),(-0.285,0.036,0.051),(-0.285,0.036,0.134),(-0.439,0.036,0),(-0.285,0.036,-0.134),(-0.285,0.036,-0.051),(-0.285,0,-0.051),(-0.202,0,-0.051),(-0.202,0,-0.204),(-0.051,0,-0.204)])
            cmds.xform(s62, t=(-3,0,-2), ws=1)
            s63= cmds.curve(d=1, n="omniLevitateCircleArrow", p=[(0,0.036,-0.439),(0.134,0.036,-0.285),(0.055,0.036,-0.285),(0.055,0,-0.285),(0.055,0,-0.204),(0.081,0,-0.195),(0.105,0,-0.182),(0.128,0,-0.167),(0.149,0,-0.149),(0.167,0,-0.128),(0.182,0,-0.105),(0.195,0,-0.081),(0.204,0,-0.055),(0.285,0,-0.055),(0.285,0.036,-0.055),(0.285,0.036,-0.134),(0.439,0.036,0),(0.285,0.036,0.134),(0.285,0.036,0.055),(0.285,0,0.055),(0.204,0,0.055),(0.195,0,0.081),(0.182,0,0.105),(0.167,0,0.128),(0.149,0,0.149),(0.128,0,0.167),(0.105,0,0.182),(0.081,0,0.195),(0.055,0,0.204),(0.055,0,0.285),(0.055,0.036,0.285),(0.134,0.036,0.285),(0,0.036,0.439),(-0.134,0.036,0.285),(-0.055,0.036,0.285),(-0.055,0,0.285),(-0.055,0,0.204),(-0.081,0,0.195),(-0.105,0,0.182),(-0.128,0,0.167),(-0.149,0,0.149),(-0.167,0,0.128),(-0.182,0,0.105),(-0.195,0,0.081),(-0.204,0,0.055),(-0.285,0,0.055),(-0.285,0.036,0.055),(-0.285,0.036,0.134),(-0.439,0.036,0),(-0.285,0.036,-0.134),(-0.285,0.036,-0.055),(-0.285,0,-0.055),(-0.204,0,-0.055),(-0.195,0,-0.081),(-0.182,0,-0.105),(-0.167,0,-0.128),(-0.149,0,-0.149),(-0.128,0,-0.167),(-0.105,0,-0.182),(-0.081,0,-0.195),(-0.055,0,-0.204),(-0.055,0,-0.285),(-0.055,0.036,-0.285),(-0.134,0.036,-0.285),(0,0.036,-0.439)])
            cmds.xform(s63, t=(-3,0,-1), ws=1)
            s64= cmds.curve(d=1, n="showerArrow", p=[(0.057,0.145,-0.093),(0.057,0.116,-0.182),(0.057,0.069,-0.263),(0.057,0.006,-0.331),(0.103,0.006,-0.331),(0.171,0.006,-0.331),(0.103,-0.053,-0.376),(0.052,-0.102,-0.403),(0,-0.154,-0.423),(-0.052,-0.102,-0.403),(-0.103,-0.053,-0.376),(-0.171,0.006,-0.331),(-0.103,0.006,-0.331),(-0.057,0.006,-0.331),(-0.057,0.069,-0.263),(-0.057,0.116,-0.182),(-0.057,0.145,-0.093),(-0.093,0.145,-0.057),(-0.182,0.116,-0.057),(-0.263,0.069,-0.057),(-0.331,0.006,-0.057),(-0.331,0.006,-0.103),(-0.331,0.006,-0.171),(-0.376,-0.053,-0.103),(-0.403,-0.102,-0.052),(-0.423,-0.154,0),(-0.403,-0.102,0.052),(-0.376,-0.053,0.103),(-0.331,0.006,0.171),(-0.331,0.006,0.103),(-0.331,0.006,0.057),(-0.263,0.069,0.057),(-0.182,0.116,0.057),(-0.093,0.145,0.057),(-0.057,0.145,0.093),(-0.057,0.116,0.182),(-0.057,0.069,0.263),(-0.057,0.006,0.331),(-0.103,0.006,0.331),(-0.171,0.006,0.331),(-0.103,-0.053,0.376),(-0.052,-0.102,0.403),(0,-0.154,0.423),(0.052,-0.102,0.403),(0.103,-0.053,0.376),(0.171,0.006,0.331),(0.103,0.006,0.331),(0.057,0.006,0.331),(0.057,0.069,0.263),(0.057,0.116,0.182),(0.057,0.145,0.093),(0.093,0.145,0.057),(0.182,0.116,0.057),(0.263,0.069,0.057),(0.331,0.006,0.057),(0.331,0.006,0.103),(0.331,0.006,0.171),(0.376,-0.053,0.103),(0.403,-0.102,0.052),(0.423,-0.154,0),(0.403,-0.102,-0.052),(0.376,-0.053,-0.103),(0.331,0.006,-0.171),(0.331,0.006,-0.103),(0.331,0.006,-0.057),(0.263,0.069,-0.057),(0.182,0.116,-0.057),(0.093,0.145,-0.057),(0.057,0.145,-0.093)])
            cmds.xform(s64, t=(-3,0,0), ws=1)
            s65= cmds.curve(d=1, n="omniPyramidArrow", p=[(0.382,0.023,-0.023),(0.382,-0.023,-0.023),(0.382,-0.023,0.023),(0.382,0.023,0.023),(0.382,0.023,-0.023),(0.432,0,0),(0.382,0.023,0.023),(0.432,0,0),(0.382,-0.023,0.023),(0.432,0,0),(0.382,-0.023,-0.023),(0.432,0,0),(0.382,0,0),(0,0,0),(-0.382,0,0),(-0.432,0,0),(-0.382,0.023,-0.023),(-0.432,0,0),(-0.382,0.023,0.023),(-0.432,0,0),(-0.382,-0.023,0.023),(-0.432,0,0),(-0.382,-0.023,-0.023),(-0.382,0.023,-0.023),(-0.382,0.023,0.023),(-0.382,-0.023,0.023),(-0.382,-0.023,-0.023),(-0.432,0,0),(-0.382,0,0),(0,0,0),(0,0,-0.382),(0,0,-0.432),(0.023,0.023,-0.382),(-0.023,0.023,-0.382),(0,0,-0.432),(-0.023,-0.023,-0.382),(0,0,-0.432),(0.023,-0.023,-0.382),(0.023,0.023,-0.382),(0.023,-0.023,-0.382),(-0.023,-0.023,-0.382),(-0.023,0.023,-0.382),(0,0,-0.432),(0,0,-0.382),(0,0,0),(0,0,0.382),(0,0,0.432),(-0.023,-0.023,0.382),(0.023,-0.023,0.382),(0.023,0.023,0.382),(-0.023,0.023,0.382),(0,0,0.432),(0.023,0.023,0.382),(0,0,0.432),(0.023,-0.023,0.382),(-0.023,-0.023,0.382),(-0.023,0.023,0.382),(0,0,0.432),(0,0,0.382),(0,0,0),(0,-0.382,0),(0,-0.432,0),(0.023,-0.382,-0.023),(0.023,-0.382,0.023),(0,-0.432,0),(-0.023,-0.382,0.023),(0.023,-0.382,0.023),(-0.023,-0.382,0.023),(-0.023,-0.382,-0.023),(0.023,-0.382,-0.023),(-0.023,-0.382,-0.023),(0,-0.432,0),(0,-0.382,0),(0,0,0),(0,0.382,0),(0,0.432,0),(0.023,0.382,0.023),(0.023,0.382,-0.023),(0,0.432,0),(-0.023,0.382,-0.023),(0.023,0.382,-0.023),(0,0.432,0),(-0.023,0.382,0.023),(0.023,0.382,0.023),(-0.023,0.382,0.023),(-0.023,0.382,-0.023)])
            cmds.xform(s65, t=(-3,0,1), ws=1)   
            #8th
            s71= cmds.curve(d=3, n="stickCircle", p=[(0,0.911,0),(0,0.9,0.056),(0,0.868,0.103),(0,0.821,0.135),(0,0.765,0.146),(0,0.709,0.135),(0,0.661,0.103),(0,0.63,0.056),(0,0.618,0),(0,0.618,0),(0,0.618,0),(0,0,0),(0,0,0),(0,0,0),(0,0.618,0),(0,0.618,0),(0,0.618,0),(0,0.63,-0.056),(0,0.661,-0.103),(0,0.709,-0.135),(0,0.765,-0.146),(0,0.821,-0.135),(0,0.868,-0.103),(0,0.9,-0.056)])
            cmds.closeCurve(s71, ps=0, rpo=1)
            cmds.xform(s71, t=(-4,0,-3), ws=1)  
            s72= cmds.curve(d=1, n="stickSquare", p=[(0,0.637,0.113),(0,0.863,0.113),(0,0.863,-0.113),(0,0.637,-0.113),(0,0.637,0.113),(0,0.637,0),(0,0,0)])
            cmds.xform(s72, t=(-4,0,-2), ws=1)
            s73= cmds.curve(d=1, n="stickTriangle", p=[(0,0.637,0.113),(0,0.863,0),(0,0.637,-0.113),(0,0.637,0.113),(0,0.637,0),(0,0,0)])
            cmds.xform(s73, t=(-4,0,-1), ws=1)
            s74= cmds.curve(d=1, n="stickSphere", p=[(0,0,0),(0,0.622,0),(0.022,0.623,0),(0.044,0.629,0),(0.065,0.637,0),(0.084,0.649,0),(0.101,0.663,0),(0.116,0.681,0),(0.128,0.7,0),(0.136,0.72,0),(0.141,0.742,0),(0.143,0.765,0),(0.141,0.787,0),(0.136,0.809,0),(0.128,0.83,0),(0.116,0.849,0),(0.101,0.866,0),(0.084,0.88,0),(0.065,0.892,0),(0.044,0.901,0),(0.022,0.906,0),(0,0.908,0),(-0.022,0.906,0),(-0.044,0.901,0),(-0.065,0.892,0),(-0.084,0.88,0),(-0.101,0.866,0),(-0.116,0.849,0),(-0.128,0.83,0),(-0.136,0.809,0),(-0.141,0.787,0),(-0.143,0.765,0),(-0.141,0.742,0),(-0.136,0.72,0),(-0.128,0.7,0),(-0.116,0.681,0),(-0.101,0.663,0),(-0.084,0.649,0),(-0.065,0.637,0),(-0.044,0.629,0),(-0.022,0.623,0),(0,0.622,0),(0,0.623,0.022),(0,0.629,0.044),(0,0.637,0.065),(0,0.649,0.084),(0,0.663,0.101),(0,0.681,0.116),(0,0.7,0.128),(0,0.72,0.136),(0,0.742,0.141),(0,0.765,0.143),(0,0.787,0.141),(0,0.809,0.136),(0,0.83,0.128),(0,0.849,0.116),(0,0.866,0.101),(0,0.88,0.084),(0,0.892,0.065),(0,0.901,0.044),(0,0.906,0.022),(0,0.908,0),(0,0.906,-0.022),(0,0.901,-0.044),(0,0.892,-0.065),(0,0.88,-0.084),(0,0.866,-0.101),(0,0.849,-0.116),(0,0.83,-0.128),(0,0.809,-0.136),(0,0.787,-0.141),(0,0.765,-0.143),(0,0.742,-0.141),(0,0.72,-0.136),(0,0.7,-0.128),(0,0.681,-0.116),(0,0.663,-0.101),(0,0.649,-0.084),(0,0.637,-0.065),(0,0.629,-0.044),(0,0.623,-0.022),(0,0.622,0),(0,0.623,0.022),(0,0.629,0.044),(0,0.637,0.065),(0,0.649,0.084),(0,0.663,0.101),(0,0.681,0.116),(0,0.7,0.128),(0,0.72,0.136),(0,0.742,0.141),(0,0.765,0.143),(0.022,0.765,0.141),(0.044,0.765,0.136),(0.065,0.765,0.128),(0.084,0.765,0.116),(0.101,0.765,0.101),(0.116,0.765,0.084),(0.128,0.765,0.065),(0.136,0.765,0.044),(0.141,0.765,0.022),(0.143,0.765,0),(0.141,0.765,-0.022),(0.136,0.765,-0.044),(0.128,0.765,-0.065),(0.116,0.765,-0.084),(0.101,0.765,-0.101),(0.084,0.765,-0.116),(0.065,0.765,-0.128),(0.044,0.765,-0.136),(0.022,0.765,-0.141),(0,0.765,-0.143),(-0.022,0.765,-0.141),(-0.044,0.765,-0.136),(-0.065,0.765,-0.128),(-0.084,0.765,-0.116),(-0.101,0.765,-0.101),(-0.116,0.765,-0.084),(-0.128,0.765,-0.065),(-0.136,0.765,-0.044),(-0.141,0.765,-0.022),(-0.143,0.765,0),(-0.141,0.765,0.022),(-0.136,0.765,0.044),(-0.128,0.765,0.065),(-0.116,0.765,0.084),(-0.101,0.765,0.101),(-0.084,0.765,0.116),(-0.065,0.765,0.128),(-0.044,0.765,0.136),(-0.022,0.765,0.141),(0,0.765,0.143)])
            cmds.xform(s74, t=(-4,0,0), ws=1)
            s75= cmds.curve(d=1, n="stickCube", p=[(-0.113,0.863,-0.113),(-0.113,0.863,0.113),(0.113,0.863,0.113),(0.113,0.863,-0.113),(-0.113,0.863,-0.113),(-0.113,0.637,-0.113),(-0.113,0.637,0.113),(-0.113,0.863,0.113),(-0.113,0.637,0.113),(0.113,0.637,0.113),(0.113,0.863,0.113),(0.113,0.637,0.113),(0.113,0.637,-0.113),(0.113,0.863,-0.113),(0.113,0.637,-0.113),(-0.113,0.637,-0.113),(0.113,0.637,0.113),(0.113,0.637,-0.113),(-0.113,0.637,0.113),(0,0.637,0),(0,0,0)])
            cmds.xform(s75, t=(-4,0,1), ws=1)
            s76= cmds.curve(d=1, n="stickPyramid", p=[(0,0.932,0),(-0.11,0.69,-0.11),(-0.11,0.69,0.11),(0,0.932,0),(-0.11,0.69,0.11),(0.11,0.69,0.11),(0,0.932,0),(0.11,0.69,0.11),(0.11,0.69,-0.11),(0,0.932,0),(0.11,0.69,-0.11),(-0.11,0.69,-0.11),(0.11,0.69,0.11),(0.11,0.69,-0.11),(-0.11,0.69,0.11),(0,0.69,0),(0,0,0)])
            cmds.xform(s76, t=(-4,0,2), ws=1)
            obj= s01,s02,s03,s04,s05,s06,s11,s12,s13,s14,s15,s16,s17,s18,s21,s22,s23,s24,s25,s26,s27,s28,s31,s32,s33,s34,s35,s41,s42,s43,s44,s51,s52,s53,s61,s62,s63,s64,s65,s71,s72,s73,s74,s75,s76
            for item in obj:
                shp= cmds.listRelatives(item, c=1, pa=1, typ="nurbsCurve")  
                newShp= cmds.rename(shp[0], "%sShape"%item.split("|")[-1])
                cmds.setAttr("%s.overrideEnabled"%newShp, 1)
                cmds.setAttr("%s.overrideColor"%newShp, 17)
            grp= cmds.group(n="ctrlGrp", em=1)
            cmds.parent(obj, grp)
            cmds.select(grp)


            """
            sur1= cmds.sphere(n="round", ax=(0,1,0), ssw=0, esw=360, r=0.285, d=3 ,s=8, nsp=4, ch=1)

            sur2= cmds.sphere(n="box", ax=(0,1,0), ssw=0, esw=360, r=1, d=1, s=4, nsp=3, ch=0)
            cmds.xform("%s.cv[0][0:]"%sur2[0], t=(0,-0.25,0), ws=1)
            cmds.xform("%s.cv[1][0]"%sur2[0], "%s.cv[1][4]"%sur2[0], t=(0.25,-0.25,0.25), ws=1)
            cmds.xform("%s.cv[1][1]"%sur2[0], t=(-0.25,-0.25,0.25), ws=1)
            cmds.xform("%s.cv[1][2]"%sur2[0], t=(-0.25,-0.25,-0.25), ws=1)
            cmds.xform("%s.cv[1][3]"%sur2[0], t=(0.25,-0.25,-0.25), ws=1)
            cmds.xform("%s.cv[2][0]"%sur2[0], "%s.cv[2][4]"%sur2[0], t=(0.25,0.25,0.25), ws=1)
            cmds.xform("%s.cv[2][1]"%sur2[0], t=(-0.25,0.25,0.25), ws=1)
            cmds.xform("%s.cv[2][2]"%sur2[0], t=(-0.25,0.25,-0.25), ws=1)
            cmds.xform("%s.cv[2][3]"%sur2[0], t=(0.25,0.25,-0.25), ws=1)
            cmds.xform("%s.cv[3][0:]"%sur2[0], t=(0,0.25,0), ws=1)

            sur3= cmds.cone(n="cone", ax=(0,1,0), p=(0,0.3,0), ssw=0, esw=360, r=0.3, hr=2, d=3, s=8, nsp=1, ch=1)

            sur4= cmds.cylinder(n="tube", ax=(0,1,0), ssw=0, esw=360, r=0.25, hr=2, d=3 ,s=8, nsp=1, ch=1)
            sur4_1= cmds.cone(n="tube1", ax=(0,1,0), ssw=0, esw=360, r=0.25, hr=0.0001, d=3, s=8, nsp=1, ch=1)
            sur4_2= cmds.cone(n="tube2", ax=(0,-1,0), ssw=0, esw=360, r=0.25, hr=0.0001, d=3, s=8, nsp=1, ch=1)
            cmds.xform("%s.cv[0:][0:]"%sur4_1[0], t=(0,0.25,0), r=1, wd=1)
            cmds.xform("%s.cv[0:][0:]"%sur4_2[0], t=(0,-0.25,0), r=1, wd=1)
            shp= cmds.listRelatives(sur4_1, sur4_2, c=1, pa=1, typ="nurbsSurface")
            newShp1= cmds.rename(shp[0], "%sShape1"%tur4)
            newShp2= cmds.rename(shp[1], "%sShape2"%tur4)
            cmds.parent(newShp1, newShp2, sur4[0], r=1, s=1)
            cmds.delete(sur4_1, sur4_2)
            cmds.select(sur4)
            """

            if cmds.checkBoxGrp(self.cb111, q=1, v1=1):
                tz= cmds.getAttr("%s.centerOfInterest"%cam)*-1
                cmds.parent(grp,cam)
                cmds.xform(grp, t=(tz/5,0,tz), wd=1)
                cmds.xform(grp, s=(tz/-20,tz/-20,tz/-20), r=1)
                cmds.parent(grp, w=1)
                if cmds.checkBoxGrp(self.cb112, q=1, v1=1):
                    cmds.setAttr("%s.ty"%grp, 0)    
            else:
                cmds.xform(grp, t=(-10,0,0), ws=1)   
            self.uiStuffClass.loadingBar(2)
            self.uiStuffClass.loadingBar(3, tim=0.05)


        else:
            cmds.warning("Please select viewport")      

    def moveShape(self, ctrl, emptyGrp, tar, inbMeth, shpMeth, repl):
        #Source might have lots of children
        oriShpTemp= cmds.listRelatives(ctrl, f=1, typ="nurbsCurve")
        oriTemp= cmds.duplicate(ctrl, po=1)
        cmds.parent(oriShpTemp, oriTemp, r=1, s=1)
        newOriShpTemp= cmds.listRelatives(oriTemp, f=1, typ="nurbsCurve")
        dupTemp= cmds.duplicate(oriTemp)
        cmds.parent(newOriShpTemp, ctrl, r=1, s=1)
        #To Fix Locked Ctrl & have other children
        shpDupTemp= cmds.listRelatives(dupTemp[0], pa=1, typ="nurbsCurve")
        dup= cmds.group(em=1, p=ctrl)
        pivTemp= cmds.xform(ctrl, q=1, rp=1, ws=1)
        cmds.xform(dup, rp=[pivTemp[0],pivTemp[1],pivTemp[2]], sp=[pivTemp[0],pivTemp[1],pivTemp[2]], ws=1)
        cmds.parent(shpDupTemp, dup, r=1, s=1)
        cmds.parent(dup, w=1)
        cmds.delete(oriTemp, dupTemp[0])
        #If Object is freezed or got rotate
        cmds.move(0,0,0, dup, rpr=1)    
        cmds.xform(dup, ro=(0,0,0), ws=1)
        cmds.makeIdentity(dup, a=1, t=1, r=1, s=1)
        #Distort scale     
        newShp= cmds.listRelatives(dup, s=1, pa=1)  
        if newShp:
            if cmds.objectType(tar)=="transform" or cmds.objectType(tar)=="joint":  
                emp= cmds.group(em=1, n="ctrlTestTemp")
                dupTemp= cmds.duplicate(tar, po=1)
                shpTemp= cmds.listRelatives(tar, f=1, s=1)
                if shpTemp:
                    cmds.parent(shpTemp, emp, r=1, s=1)
                    newShpTemp= cmds.listRelatives(emp, f=1, s=1)
                oldScal= cmds.xform(emp, bb=1, q=1, ws=1)
                scalar= cmds.xform(emptyGrp, q=1, s=1, ws=1)
                newScal= cmds.xform(dup, bb=1, q=1, ws=1)
                if shpTemp:    
                    cvs= []
                    for thing in newShp:
                        cvs.append("%s.cv[0:]"%thing)         
                    #Normal is old/new*scale but if any of it is 0(meaning ctrl flat), will get the other side as average (eg. if X=0 so get (Y+Z)/2 rather than 1)
                    #Tried a method of fixing to 1 if its flat but sometimes the formula doesnt work if the scale is too big/small
                    oldSX= oldScal[3]-oldScal[0]
                    oldSY= oldScal[4]-oldScal[1]
                    oldSZ= oldScal[5]-oldScal[2]
                    newSX= newScal[3]-newScal[0]
                    newSY= newScal[4]-newScal[1]
                    newSZ= newScal[5]-newScal[2]
                    #X
                    if round(oldSX, 3)==0 and round(newSX, 3)!=0:
                        newX= ((oldSY+oldSZ)/2)/(newSX)*scalar[0]
                    elif round(oldSX, 3)!=0 and round(newSX, 3)==0:
                        newX= (oldSX)/((newSY+newSZ)/2)*scalar[0]
                    elif round(oldSX, 3)==0 and round(newSX, 3)==0:
                        newX= ((oldSY+oldSZ)/2)/((newSY+newSZ)/2)*scalar[0]
                    else:
                        newX= (oldSX)/(newSX)*scalar[0]
                    #Y
                    if round(oldSY, 3)==0 and round(newSY, 3)!=0:
                        newY= ((oldSX+oldSZ)/2)/(newSY)*scalar[0]
                    elif round(oldSY, 3)!=0 and round(newSY, 3)==0:
                        newY= (oldSY)/((newSX+newSZ)/2)*scalar[0]
                    elif round(oldSY, 3)==0 and round(newSY, 3)==0:
                        newY= ((oldSX+oldSZ)/2)/((newSX+newSZ)/2)*scalar[0]
                    else:
                        newY= (oldSY)/(newSY)*scalar[0]
                    #Z
                    if round(oldSZ, 3)==0 and round(newSZ, 3)!=0:
                        newZ= ((oldSX+oldSY)/2)/(newSZ)*scalar[0]
                    elif round(oldSZ, 3)!=0 and round(newSZ, 3)==0:
                        newZ= (oldSZ)/((newSX+newSY)/2)*scalar[0]
                    elif round(oldSZ, 3)==0 and round(newSZ, 3)==0:
                        newZ= ((oldSX+oldSY)/2)/((newSX+newSY)/2)*scalar[0]
                    else:
                        newZ= (oldSZ)/(newSZ)*scalar[0]
                    minV= min(newX,newY,newZ)
                    maxV= max(newX,newY,newZ)
                    if inbMeth==0:
                        if cmds.checkBoxGrp(self.cb123, q=1, v1=1) and cmds.checkBoxGrp(self.cb124, q=1, v1=1):  
                            cmds.xform(cvs, s=(newX/scalar[0], newY/scalar[1], newZ/scalar[2]), ws=1)
                        elif cmds.checkBoxGrp(self.cb123, q=1, v1=1) and cmds.checkBoxGrp(self.cb124, q=1, v1=1)==0:
                            cmds.xform(cvs, s=(newX/scalar[0]/maxV, newY/scalar[1]/maxV, newZ/scalar[2]/maxV), ws=1)
                        elif cmds.checkBoxGrp(self.cb123, q=1, v1=1)==0 and cmds.checkBoxGrp(self.cb124, q=1, v1=1):
                            cmds.xform(cvs, s=(maxV/scalar[0], maxV/scalar[1], maxV/scalar[2]), ws=1)
                        elif cmds.checkBoxGrp(self.cb123, q=1, v1=1)==0 and cmds.checkBoxGrp(self.cb124, q=1, v1=1)==0:  
                            cmds.xform(cvs, s=(1/scalar[0], 1/scalar[1], 1/scalar[2]), ws=1)
                    if cmds.checkBoxGrp(self.cb125, q=1, v1=1):
                        cmds.xform(cvs, s=(1.2,1.2,1.2), r=1) 
                    #Estimate position   
                    cmds.xform(dupTemp[0], t=(0,0,0), ro=(0,0,0), s=(1,1,1), wd=1)
                    oriRp= cmds.xform(dupTemp[0], q=1, rp=1, ws=1)
                    cmds.xform(dupTemp[0], ztp=1)
                    zeroRp= cmds.xform(dupTemp[0], q=1, rp=1, ws=1)
                    #Created ctrl will be in world space regardless of freeze object (but if parent ctrl shape then need to be freeze)
                    if shpMeth==1:
                        oriRp, zeroRp= (0,0,0),(0,0,0)     
                    newCenPiv= cmds.xform(dup, bb=1, q=1, ws=1)
                    piv= cmds.xform(dup, q=1, rp=1, ws=1)
                    if cmds.checkBoxGrp(self.cb126, q=1, v1=1):  
                        if inbMeth==0:
                            newPivX= (oldScal[0]+oldScal[3])/2 +(zeroRp[0]-oriRp[0]) -(newCenPiv[0]+newCenPiv[3])/2
                            newPivY= (oldScal[1]+oldScal[4])/2 +(zeroRp[1]-oriRp[1]) -(newCenPiv[1]+newCenPiv[4])/2
                            newPivZ= (oldScal[2]+oldScal[5])/2 +(zeroRp[2]-oriRp[2]) -(newCenPiv[2]+newCenPiv[5])/2
                        else:
                            newPivX= 0
                            newPivY= 0
                            newPivZ= 0
                    #This is to fix if target(not the ctrl) is freezed 
                    else:
                        newPivX= zeroRp[0]-oriRp[0]
                        newPivY= zeroRp[1]-oriRp[1]
                        newPivZ= zeroRp[2]-oriRp[2]
                    cmds.xform(cvs, t=(newPivX, newPivY, newPivZ), r=1)  
                #Put back ctrl shape, the only way to avoid duplicating target (will lag if have children)
                if shpTemp:
                    cmds.parent(newShpTemp, tar, r=1, s=1)
                else:
                    tarScal= cmds.xform(emptyGrp, q=1, s=1, ws=1)
                    cmds.xform(dup, s=(1/tarScal[0], 1/tarScal[1], 1/tarScal[2]), ws=1)
                    cmds.makeIdentity(dup, a=1, s=1)
                cmds.delete(dupTemp[0], emp)
        #Follow color
        shp= cmds.listRelatives(tar, pa=1, typ="nurbsCurve")
        newShp= cmds.listRelatives(dup, pa=1, typ="nurbsCurve")
        if shp:    
            if cmds.checkBoxGrp(self.cb122, q=1, v1=1): 
                en= cmds.getAttr("%s.overrideEnabled"%shp[0])
                dis= cmds.getAttr("%s.overrideDisplayType"%shp[0])
                num= cmds.getAttr("%s.overrideColor"%shp[0])
                for allShp in newShp:      
                    cmds.setAttr("%s.overrideEnabled"%allShp, en) 
                    cmds.setAttr("%s.overrideDisplayType"%allShp, dis) 
                    cmds.setAttr("%s.overrideColor"%allShp, num) 
            #Replace existing shape 
            if cmds.checkBoxGrp(self.cb121, q=1, v1=1)==1: 
                if shpMeth==1:
                    if repl==1:
                        if cmds.listRelatives(tar, pa=1, typ="nurbsCurve"):
                            cmds.delete(shp)
        #Cleanup
        finalShp= []
        for allShp in newShp:
            #Follow null transform name is more accurate (especially when creating ctrl for jnt)
            replShp= cmds.rename(allShp, "%sShape"%emptyGrp.split("|")[-1].split(".")[0])     
            shp= cmds.parent(replShp, emptyGrp, r=1, s=1)
            finalShp.append(shp[0])
        #reorder shape node to be first node so that click down can easily select
        cmds.reorder(finalShp, r=1)   
        cmds.delete(dup)
              
    def preTest(self, objOri, meth):
        test1= []
        test2=1
        if cmds.checkBoxGrp(self.cbTar, q=1, v1=1):
            if cmds.textFieldButtonGrp(self.txtTar, q=1, tx=1):
                obj= objOri
                tar= cmds.textFieldButtonGrp(self.txtTar, q=1, tx=1).split(", ")
                if len(tar)>=meth:
                    if objOri:
                        for item in objOri:
                            if cmds.listRelatives(item, pa=1, typ="nurbsCurve")==None:
                                test2=[]
                        if test2:
                            test1=1
                        else:
                            cmds.warning("One of the selected object is not a CTRL")      
                    else:
                        cmds.warning("Please select 1 CTRL")
                else:
                    cmds.warning("Please input at least %s TARGET"%meth)
            else:
                cmds.warning("<TARGET> textfield is empty!")
        else:
            obj= objOri[:1]
            tar= objOri[1:]
            if len(objOri)>=meth+1:
                if cmds.listRelatives(obj, pa=1, typ="nurbsCurve"):
                    test1= 1    
                else:
                    cmds.warning("The first selected object is not a CTRL")  
            else:
                cmds.warning("Please select 1 CTRL and at least %s TARGET (Total of at least %s)"%(meth, meth+1))
        return test1, tar, obj

    def createCtrl(self):
        objOri= cmds.ls(os=1, fl=1)
        allTar= []
        test1, tar, obj= self.preTest(objOri, 1)
        if test1:
            self.uiStuffClass.loadingBar(1, len(obj)*len(tar))
            for item in obj:
                for stuff in tar:
                    #replace jnt is so that when create ctrl on jnt (while using snapper) wont have to rename so hard
                    tarGrp= cmds.group(em=1, n="%s_ctrl"%stuff.split(".")[0].replace("_jnt",""))
                    if cmds.objectType(stuff)=="transform" or cmds.objectType(stuff)=="joint":  
                        rot= cmds.xform(stuff, q=1, ro=1, ws=1)
                        scal= cmds.xform(stuff, q=1, s=1, ws=1)
                        piv= cmds.xform(stuff, q=1, rp=1, ws=1)
                        cmds.xform(tarGrp, t=(piv[0], piv[1], piv[2]), ro=(rot[0],rot[1],rot[2]), s=(scal[0],scal[1],scal[2]), ws=1)    
                    elif cmds.objectType(stuff)=="mesh" or cmds.objectType(stuff)=="nurbsCurve" or cmds.objectType(stuff)=="nurbsSurface":  
                        piv= cmds.xform(stuff, q=1, t=1, ws=1)
                        cmds.xform(tarGrp, t=(piv[0], piv[1], piv[2]), ws=1)    
                    self.moveShape(item, tarGrp, stuff, 0, 0, 1)
                    cmds.makeIdentity(tarGrp, a=1, s=1)
                    allTar.append(tarGrp)
                    self.uiStuffClass.loadingBar(2)
            self.uiStuffClass.loadingBar(3, sel=allTar)

    def parentCtrlShape(self):
        objOri= cmds.ls(sl=1)
        chg= 1
        test1, tar, obj= self.preTest(objOri, 1)
        if test1:
            self.uiStuffClass.loadingBar(1, len(obj)*len(tar))
            for item in obj:
                for stuff in tar:
                    self.moveShape(item, stuff, stuff, 0, 1, chg)
                    self.uiStuffClass.loadingBar(2)
                #This is so that next ctrl iteration wont get remove
                chg= 0
            self.uiStuffClass.loadingBar(3, sel=tar)

    def CreateInbetweenCtrl(self, meth):
        objOri= cmds.ls(sl=1, tr=1)
        allTar, allShp, delGrp= [],[],[]
        test1, tar, obj= self.preTest(objOri, 2)
        if test1:
            if cmds.listRelatives(obj[0], pa=1, typ="nurbsCurve"):
                self.uiStuffClass.loadingBar(1, len(obj)*len(tar))
                for item in obj:
                    for stuff in reversed(tar):
                        if stuff==tar[-1]:
                            prev=stuff
                            pt2= cmds.xform(prev, q=1, t=1, ws=1)
                        else:
                            #Change piv for freeze object
                            tarGrp= cmds.group(em=1, n="%s_ctrl"%stuff)
                            piv= cmds.xform(stuff, q=1, rp=1, ws=1)
                            cmds.xform(tarGrp, t=(piv[0],piv[1],piv[2]), s=(1,1,1))
                            #Create dummy direction to get local bounding box coz its inbetween
                            direcDum1= cmds.duplicate(tarGrp, po=1)
                            tranTemp= cmds.xform(stuff, q=1, rp=1, ws=1)
                            upObj= cmds.spaceLocator()
                            cmds.xform(upObj[0], t=(tranTemp[0],tranTemp[1]+1,tranTemp[2]), ws=1)
                            ac= cmds.aimConstraint(prev, direcDum1, mo=0, w=1, aim=[1,0,0], u=[0,1,0], wut="object", wuo=upObj[0])
                            cmds.delete(ac,upObj[0])
                            #If the selected is joint, boundingbox wont work
                            for dummy in (stuff,prev):
                                if cmds.objectType(dummy)=="joint":
                                    lastDum= cmds.spaceLocator()
                                    pnt= cmds.xform(dummy, q=1, t=1, ws=1)
                                    cmds.xform(lastDum, t=(pnt[0],pnt[1],pnt[2]), ws=1)
                                else:        
                                    #Duplicate the node and shape separately
                                    oriShpTemp= cmds.listRelatives(dummy, f=1, typ="nurbsCurve")
                                    oriTemp= cmds.duplicate(dummy, po=1)
                                    if oriShpTemp:
                                        cmds.parent(oriShpTemp, oriTemp, r=1, s=1)
                                    else:
                                        oriLocTemp= cmds.listRelatives(dummy, f=1, typ="locator")
                                        if oriLocTemp:
                                            cmds.parent(oriLocTemp, oriTemp, r=1, s=1)    
                                    #Reparent back the shape
                                    newOriShpTemp= cmds.listRelatives(oriTemp, f=1, typ="nurbsCurve")
                                    dupTemp= cmds.duplicate(oriTemp)
                                    if newOriShpTemp:
                                        cmds.parent(newOriShpTemp, dummy, r=1, s=1)
                                    else:
                                        newOriLocTemp= cmds.listRelatives(oriTemp, f=1, typ="locator")
                                        if newOriLocTemp:
                                            cmds.parent(newOriLocTemp, dummy, r=1, s=1)    
                                    shpDupTemp= cmds.listRelatives(dupTemp[0], pa=1, typ="nurbsCurve")
                                    lastDum= [cmds.group(em=1, p=dummy)]
                                    pivTemp= cmds.xform(dummy, q=1, rp=1, ws=1)
                                    cmds.xform(lastDum, rp=[pivTemp[0],pivTemp[1],pivTemp[2]], sp=[pivTemp[0],pivTemp[1],pivTemp[2]], ws=1)
                                    if shpDupTemp:
                                        cmds.parent(shpDupTemp, lastDum, r=1, s=1)
                                    else:
                                        LocDupTemp= cmds.listRelatives(dupTemp[0], f=1, typ="locator")
                                        if LocDupTemp:
                                            cmds.parent(LocDupTemp, lastDum, r=1, s=1) 
                                    cmds.parent(lastDum, w=1)
                                    cmds.delete(oriTemp, dupTemp[0])                             
                                if dummy==stuff:
                                    preDum= lastDum
                            cmds.parent(preDum[0], lastDum[0], direcDum1)
                            cmds.makeIdentity(preDum[0], lastDum[0], a=1, t=1, r=1, s=1)
                            cmds.parent(lastDum[0], preDum[0])
                            aimRot= cmds.xform(direcDum1, q=1, ro=1, ws=1)
                            #Create ctrl
                            if meth==1 or meth==2:
                                self.moveShape(item, tarGrp, stuff, 1, 0, 1)
                            elif meth==3:
                                self.moveShape(item, tarGrp, stuff, 1, 1, 1)   
                            tempTar= cmds.duplicate(tarGrp, po=1)
                            cmds.parent(tarGrp, tempTar)  
                            #Calculate the distance
                            pt1= cmds.xform(stuff, q=1, t=1, ws=1)
                            shpSc= cmds.xform(tarGrp, q=1, bb=1, r=1)
                            scalar= cmds.xform(item, q=1, s=1, ws=1)
                            scalarX= abs(shpSc[0]-shpSc[3])
                            scalarY= abs(shpSc[1]-shpSc[4])
                            scalarZ= abs(shpSc[2]-shpSc[5])                        
                            bb= cmds.xform(preDum[0], q=1, bb=1, r=1)
                            bbMain= cmds.xform(preDum[0], q=1, bb=1, ws=1)
                            bbX, bbY, bbZ= abs(bb[0]-bb[3]),abs(bb[1]-bb[4]),abs(bb[2]-bb[5])
                            if round(scalarX, 3)==0.0:
                                scalarX= 1
                            if round(scalarY, 3)==0.0:
                                scalarY= 1
                            if round(scalarZ, 3)==0.0:
                                scalarZ= 1
                            if round(bbX, 3)==0.0:
                                bbX= scalarX
                            if round(bbY, 3)==0.0:
                                bbY= scalarY
                            if round(bbZ, 3)==0.0:
                                bbZ= scalarZ
                            minBB= min(bbX,bbY,bbZ)
                            if round(minBB, 3)==0.0:
                                minBB= 1
                            dis= ((pt1[0]-pt2[0])**2+ (pt1[1]-pt2[1])**2+ (pt1[2]-pt2[2])**2)**(0.5)                             
                            #Scale again because using inbetween
                            if cmds.checkBoxGrp(self.cb123, q=1, v1=1) and cmds.checkBoxGrp(self.cb124, q=1, v1=1): 
                                cmds.xform(tarGrp, s=(bbX/scalarX, bbY/scalarY, bbZ/scalarZ), ws=1)
                            elif cmds.checkBoxGrp(self.cb123, q=1, v1=1) and cmds.checkBoxGrp(self.cb124, q=1, v1=1)==0: 
                                cmds.xform(tarGrp, s=(bbX/scalarX, 1, 1), ws=1)
                            elif cmds.checkBoxGrp(self.cb123, q=1, v1=1)==0 and cmds.checkBoxGrp(self.cb124, q=1, v1=1): 
                                cmds.xform(tarGrp, s=(minBB/scalarX, minBB/scalarY, minBB/scalarZ), ws=1)
                            if cmds.checkBoxGrp(self.cb125, q=1, v1=1):
                                cmds.xform(tarGrp, s=(1,1.2,1.2), r=1) 
                            if cmds.checkBoxGrp(self.cb123, q=1, v1=1):
                                if cmds.checkBoxGrp(self.cb127, q=1, v1=1):
                                    cmds.xform(tarGrp, s=(dis*0.8/bbX,1,1), r=1)       
                            #Move
                            cvs= []
                            shp= cmds.listRelatives(tarGrp, pa=1, typ="nurbsCurve")
                            for thing in shp:
                                cvs.append("%s.cv[0:]"%thing) 
                            cmds.xform(tarGrp, ro=(aimRot[0],aimRot[1],aimRot[2]), ws=1)    
                            piv= cmds.xform(tarGrp, q=1, rp=1, ws=1)
                            if meth==1:
                                cmds.xform(tarGrp, t=(dis/2,0,0), r=1, os=1, wd=1)
                            elif meth==2:
                                cmds.xform(cvs, t=(dis/2,0,0), r=1, os=1, wd=1)
                            elif meth==3:
                                cmds.xform(cvs, t=(dis/(2*scalar[0]),0,0), r=1, os=1, wd=1)
                            cmds.makeIdentity(tarGrp, a=1, s=1)  
                            if cmds.checkBoxGrp(self.cb128, q=1, v1=1)==0:
                                cmds.xform(tarGrp, ro=(0,0,0), wd=1)  
                            cmds.parent(tarGrp, w=1)
                            cmds.delete(tempTar,direcDum1) 
                            #Estimate Position, to move cv if bounding box center is different, meaning the both shape is different
                            """
                            if cmds.checkBoxGrp(self.cb126, q=1, v1=1):
                                pivNew= cmds.xform(tarGrp, q=1, bb=1, ws=1)
                                cmds.xform(cvs, t=((bbMain[0]+bbMain[3])/2-(pivNew[0]+pivNew[3])/2, (bbMain[1]+bbMain[4])/2-(pivNew[1]+pivNew[4])/2, (bbMain[2]+bbMain[5])/2-(pivNew[2]+pivNew[5])/2), r=1, ws=1)
                            """
                            if meth==3:
                                cmds.makeIdentity(tarGrp, a=1, r=1)     
                                newShp= cmds.listRelatives(tarGrp, pa=1, typ="nurbsCurve")
                                allShp.append(newShp)
                                delGrp.append(tarGrp)
                                allTar.append(stuff)
                            else:
                                allTar.append(tarGrp)
                            #Setting up for next iteration
                            prev= stuff
                            pt2= cmds.xform(prev, q=1, t=1, ws=1)
                        self.uiStuffClass.loadingBar(2)
                #Parent ctrl shape outside the loop or else will affect the next iteration bounding box size
                if meth==3:
                    for ctrlShp, newTar, dele in zip(allShp, allTar, delGrp):
                        shp= cmds.parent(newShp, newTar, r=1, s=1)
                        cmds.delete(dele)   
                        cmds.reorder(shp, r=1)
                        for subShp in shp:
                            newShp= cmds.rename(subShp, "%sShape"%newTar)                        
                self.uiStuffClass.loadingBar(3, sel=allTar)

    def textCurve(self):
        line= cmds.textFieldButtonGrp(self.txtCtrl, q=1 ,tx=1) 
        if line:
            self.uiStuffClass.loadingBar(1, 2)
            self.uiStuffClass.loadingBar(2)
            if cmds.optionMenuGrp(self.drop131, q=1, sl=1)==1:
                ft= "Arial"
            else:
                ft= "Times New Roman"
            if cmds.optionMenuGrp(self.drop132, q=1, sl=1)==1:
                fs= "w400"
                fsi= ""
            elif cmds.optionMenuGrp(self.drop132, q=1, sl=1)==2:
                fs= "w700" 
                fsi= ""       
            elif cmds.optionMenuGrp(self.drop132, q=1, sl=1)==3:
                fs= "w400" 
                fsi= "|i"
            else:
                fs= "w700"
                fsi= "|i"
            obj= cmds.textCurves(f="%s|wt75|sz27.8|%s|st100%s"%(ft, fs, fsi), ch=1, t="%s"%line)  
            shp= cmds.listRelatives(obj, ad=1, pa=1, typ="nurbsCurve") 
            chd= cmds.listRelatives(obj, c=1, pa=1)    
            cmds.delete(obj[1])
            cmds.makeIdentity(obj[0], a=1, t=1, r=1, s=1, n=0, pn=1)
            cmds.parent(shp, obj[0], r=1, s=1)
            cmds.delete(chd)
            allShp=[] 
            for item in shp:
                cmds.setAttr("%s.ihi"%item,0)
                cmds.rename(item, "%s_textCurveShape"%line)
            newObj= cmds.rename(obj[0], "%s_textCurve"%line)
            #Center pivot the ctrl to freeze and move it back up
            cmds.xform(newObj, cp=1)
            piv= cmds.xform(newObj, q=1, rp=1)
            cmds.xform(newObj, t=(-piv[0],-piv[1],-piv[2]), ws=1)
            cmds.makeIdentity(newObj, a=1, t=1, r=1, s=1, n=0, pn=1)
            cmds.xform(newObj, t=(piv[0],piv[1],piv[2]), ws=1)
            self.uiStuffClass.loadingBar(2)
            self.uiStuffClass.loadingBar(3, sel=newObj, tim=0.05)
        else:
            cmds.warning("<TEXT CTRL> textfield is empty!")

    def rotateCtrlShape(self):
        test1= 1
        obj= cmds.ls(sl=1)
        allObj= []
        for item in obj:
            if item.split(".cv")[0] not in allObj:
               allObj.append(item.split(".cv")[0]) 
        if allObj:
            shps= cmds.listRelatives(allObj, pa=1, typ="nurbsCurve")
            if shps==None:  
                test1=[]
        else:
            cmds.warning("Please select at least 1 ctrl or Cvs")
        if test1:
            allShp=[]
            self.uiStuffClass.loadingBar(1, len(allObj))
            for item in allObj:
                allObjCv= []
                shps= cmds.listRelatives(item, pa=1, typ="nurbsCurve")
                if shps:
                    allShp.append(shps)
                    for stuff in shps:
                        allObjCv.append("%s.cv[0:]"%stuff)
                if cmds.radioButtonGrp(self.rb211, q=1, sl=1)==3:
                    oldScal= cmds.xform(allObjCv, bb=1, q=1, ws=1)
                    cp= cmds.xform(item, q=1, rp=1, ws=1)
                    if cmds.optionMenuGrp(self.drop211, q=1, sl=1)==1:
                        cmds.rotate(90,0,0, allObjCv, cp=1)   
                    elif cmds.optionMenuGrp(self.drop211, q=1, sl=1)==2:
                        cmds.rotate(0,90,0, allObjCv, cp=1)   
                    elif cmds.optionMenuGrp(self.drop211, q=1, sl=1)==3:
                        cmds.rotate(0,0,90, allObjCv, cp=1)  
                    newScal= cmds.xform(allObjCv, q=1, bb=1, ws=1)
                    piv= cmds.xform(allObjCv, q=1, bb=1, ws=1)
                    #There might be a ctrl that is flat, hence divide 0 will be error    
                    if round(oldScal[3]-oldScal[0], 3)==0.0 or round(newScal[3]-newScal[0], 3)==0.0:
                        newX=1
                    else:
                        newX= (oldScal[3]-oldScal[0])/(newScal[3]-newScal[0])
                    if round(oldScal[4]-oldScal[1], 3)==0.0 or round(newScal[4]-newScal[1], 3)==0.0:
                        newY=1
                    else:
                        newY= (oldScal[4]-oldScal[1])/(newScal[4]-newScal[1])
                    if round(oldScal[5]-oldScal[2], 3)==0.0 or round(newScal[5]-newScal[2], 3) ==0.0:
                        newZ=1
                    else:
                        newZ= (oldScal[5]-oldScal[2])/(newScal[5]-newScal[2])
                    cmds.scale(newX,newY,newZ, allObjCv, p=(((piv[0]+piv[3])/2),((piv[1]+piv[4])/2),((piv[2]+piv[5])/2)), r=1)
                else:
                    if cmds.radioButtonGrp(self.rb211, q=1, sl=1)==2:
                        val=1
                    else:
                        val=0
                    if cmds.optionMenuGrp(self.drop211, q=1, sl=1)==1:
                        cmds.rotate(90,0,0, allObjCv, cp=val)   
                    elif cmds.optionMenuGrp(self.drop211, q=1, sl=1)==2:
                        cmds.rotate(0,90,0, allObjCv, cp=val)   
                    elif cmds.optionMenuGrp(self.drop211, q=1, sl=1)==3:
                        cmds.rotate(0,0,90, allObjCv, cp=val)
                self.uiStuffClass.loadingBar(2)
            self.uiStuffClass.loadingBar(3, sel=allObj, tim=0.05)
        else:
            cmds.warning("One of the selected object does not have CTRL SHAPE NODE (nurbsCurve)")  

    def enOver(self):
        rb31= cmds.radioButtonGrp(self.rb221, q=1, sl=1)
        rb2= cmds.radioButtonGrp(self.rb222, q=1, sl=1)        
        obj= cmds.ls(sl=1)
        test1= 1
        for item in obj:
            shp= cmds.listRelatives(item, s=1, pa=1)   
            if shp==None:
                test1=[]
        if rb31==1:
            self.uiStuffClass.loadingBar(1, len(obj))
            for item in obj:
                shp= cmds.listRelatives(item, s=1, pa=1)  
                if rb2==1:
                    cmds.setAttr("%s.overrideEnabled"%item, 0) 
                    for stuff in shp:
                        cmds.setAttr("%s.overrideEnabled"%stuff, 1)     
                    allChd= cmds.listRelatives(item, ad=1, pa=1)
                    for chd in allChd:
                        chdShp= cmds.listRelatives(chd, s=1, pa=1)
                        if chdShp:
                            for thing in chdShp:
                                if cmds.getAttr("%s.overrideEnabled"%thing)==0: 
                                    if cmds.setAttr("%s.overrideColor"%thing)!=0:
                                        cmds.setAttr("%s.overrideEnabled"%thing, 1)                              
                else:
                    cmds.setAttr("%s.overrideEnabled"%item, 1) 
                    for stuff in shp:
                        cmds.setAttr("%s.overrideEnabled"%stuff, 0)  
                    if rb2==2:
                        cmds.setAttr("%s.overrideDisplayType"%item, 0)  
                    elif rb2==3:
                        cmds.setAttr("%s.overrideDisplayType"%item, 1)
                    else:
                        cmds.setAttr("%s.overrideDisplayType"%item, 2)
                    allChd= cmds.listRelatives(item, ad=1, pa=1)
                    for chd in allChd:
                        chdShp= cmds.listRelatives(chd, s=1, pa=1)
                        if chdShp:
                            for thing in chdShp:
                                if cmds.getAttr("%s.overrideEnabled"%thing)==1: 
                                    cmds.setAttr("%s.overrideEnabled"%thing, 0)
                self.uiStuffClass.loadingBar(2)
            self.uiStuffClass.loadingBar(3, tim=0.05)        
        else:
            if test1:
                self.uiStuffClass.loadingBar(1, len(obj))
                for item in obj:
                    shp= cmds.listRelatives(item, s=1, pa=1) 
                    for stuff in shp:
                        if rb2==1:
                            cmds.setAttr("%s.overrideEnabled"%stuff, 0)  
                        else:
                            cmds.setAttr("%s.overrideEnabled"%stuff, 1)  
                            if rb2==2:
                                cmds.setAttr("%s.overrideDisplayType"%stuff, 0)  
                            elif rb2==3:
                                cmds.setAttr("%s.overrideDisplayType"%stuff, 1)
                            else:
                                cmds.setAttr("%s.overrideDisplayType"%stuff, 2)
                    self.uiStuffClass.loadingBar(2)
                self.uiStuffClass.loadingBar(3, tim=0.05)                      
            else:
                cmds.warning("One of the selected object does not have a shape node")

    def changeColor(self):
        meth= cmds.radioButtonGrp(self.rb31, q=1, sl=1)
        num= cmds.palettePort(self.pale, q=1, scc=1)
        if meth==1: 
            if cmds.ls(sl=1):      
                obj= cmds.ls(sl=1)
                self.uiStuffClass.loadingBar(1, len(obj))  
                for item in obj:
                    shp= cmds.listRelatives(item, pa=1, typ="nurbsCurve")   
                    if shp:   
                        for thing in shp:
                            cmds.setAttr("%s.overrideEnabled"%thing, 1)
                            cmds.setAttr("%s.overrideColor"%thing, num)
                    else:        
                        cmds.setAttr("%s.overrideEnabled"%item, 1)
                        cmds.setAttr("%s.overrideColor"%item, num)
                    self.uiStuffClass.loadingBar(2)
                self.uiStuffClass.loadingBar(3, tim=0.05) 
            else:
                cmds.warning("Please select at least 1 OBJECT")
        elif meth==2:
            tar= []
            obj= cmds.ls(typ="nurbsCurve")
            for thing in obj:
                ovr= cmds.getAttr("%s.overrideEnabled"%thing)
                if ovr==1: 
                    col= cmds.getAttr("%s.overrideColor"%thing)
                    if col==num:
                        item= cmds.listRelatives(thing, p=1, pa=1)  
                        if item not in tar:
                            tar.append(item[0])
            if tar:
                self.uiStuffClass.loadingBar(1, 1)
                self.uiStuffClass.loadingBar(2)
                self.uiStuffClass.loadingBar(3, sel=tar, tim=0.05)
            else:
                cmds.warning("There is no NURBSCURVE(CTRL) with specify color in the scene")

    def helps(self):
        name="Help On CtrlMaker"
        helpTxt=""" 
        - To create ctrl or change shape
        - To edit (rotate or change state)
        - To change color or select based on color



        < Create >
        ===========
            1) Generate All Shape
            -------------------------
                1. Center of Current View
                    - Create according to your view's center pivot (scales up/down as well)

                2. On Grid
                    - translateY = 0 


            2) Create Ctrl / Parent Ctrl Shape
            ------------------------------------
                1. Create Ctrl
                    - Create ctrl on selected object

                2. Create Inbetween Ctrl
                    - Create ctrl inbetween selected object

                3. Create Ctrl With Inbetween Shape
                    - Create ctrl inbetween 2 objects (pivots at 1st object but shape is inbetween the 2 object)
                    - Able to create down the chain, multiple target (eg. Select 4 targets to create 3 inbetween ctrl)

                5. Parent Ctrl Shape
                    - Parent ctrl shape to selected object

                6. Parent Ctrl Shape (Inbetween)
                    - Parent ctrl shape to inbetween 2 objects
                    - Able to create down the chain, multiple target (eg. Select 4 targets to create 3 inbetween ctrl)


                <Replace Existing Shape>
                    - Replace existing shape node

                <Follow Existing Color> 
                    - Follow color if got shape node
                    - Follow the first shape node if have multiple

                <Distort Ratio Size>
                    - Follow the object bounding box ratio (not size)

                <Resize> (Overall Scale)
                    - Follow the object bounding box max value                

                <Enlarge> (For Better Selection)
                    - The Ctrl shape  is scaled x1.2 (because some shape hard to select if its similar to object shape)
                    - (*eg. the mesh is a cube, ctrl is also a cube)

                <Estimate Shape's Center> (Not Pivot, Not For Inbetween)
                    - Estimate the ctrl's vertex center position (might not be accurate for certain ctrl shape)
                    - Estimate object shape center position
                    (* eg. ctrl might be above the pivot)

                <Inbetween Pivots> (Not Wrap Around, For Inbetween)
                    - Mainly affected size it scaleX
                    - ScaleX is calculate between the pivots of object x0.8
                    - Without is its between the bounding box of the object
                     (meaning the shape will "wrap" around the object)

                <Direction Point To Next> (For Inbetween)
                    - Create according to selection direction, instead of the selected object's orientation
                    (the created ctrl's X will be pointing towards the next target instead of following the orientation)


            3) Text Ctrl
            -------------
                - Create text ctrl (Just one object, unlike maya's)


        < Edit >
        ==========
            1) Rotate Ctrl Shape
            ----------------------
                <Pivot>
                    - Rotate according to object's pivot

                <Center Of Shape>
                    - Rotate according to object's center pivot

                <Distort Center>
                    - Similar to <Center Of Shape> But will distort the ctrl shape

            2) Enable Override
            -------------------
                1. Enable override either on "Transform Node" or "Shape Node"
                2. Change mode (Disable, Enable, Template, Reference)

                (* When modify <Transform Node>, all the children's shape node's override enabled are off)
                (* When <Off> <Transform Node>, all the children's shape node's override enabled are on back if they have color)


        < Change Color >
        --------------------
            1. Change color / Select ctrl with selected color

            (* Mesh & Joint will do on the object itself)
            (* Ctrl(Curve) or joint that have shape nodes, will do on the shape node instead)
        """
        self.helpBoxClass.helpBox1(name, helpTxt)
        
    def reloadSub(self):
        CtrlMaker()  
        
            
if __name__ == '__main__':
    CtrlMaker()




